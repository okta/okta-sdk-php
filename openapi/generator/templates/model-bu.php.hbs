<?php
/*******************************************************************************
 * Copyright 2017-Present Okta, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/

namespace Okta\\{{namespace}};

{{#if namespacedModels}}
{{#each namespacedModels as |namespacedModel|}}
use Okta\\{{namespacedModel.namespace}}\\{{namespacedModel.modelName}};
{{/each}}

{{/if}}
class {{modelName}} extends {{getExtends modelName}}
{
    {{#each properties}}
    const {{mySnakeCase propertyName}} = '{{propertyName}}';
    {{/each}}

    {{#if properties}}
    {{#each properties}}
    {{#if this.default}}
    private ${{propertyName}} = '{{this.default}}';
    {{/if}}
    {{/each}}
    {{/if}}
    {{#each crudOperations}}
    {{#if (eq alias "read")}}
        {{#if (eq this.operation.operationId "getFactor")}}
    public function get($userId, $factorId, $query)
    {
        $factor = \Okta\Client::getInstance()
                    ->getDataStore()
                    {{#if (ne this.operation.consumes.[0] "application/json")}}
                    ->setAcceptHeader("{{this.operation.consumes.[0]}}")
                    {{/if}}
                    {{#if (ne this.operation.produces.[0] "application/json")}}
                    ->setContentTypeHeader("{{this.operation.produces.[0]}}")
                    {{/if}}
                    ->getResource(
                        $query,
                        \\{{this.defaultReturnType}}::class,
                        "{{getCrudOperationPath this}}"
                    );
        return $factor->convertFromGenericFactor();
    }
        {{else if (eq this.operation.operationId "getApplication")}}
    public function get($query)
    {
        $application = \Okta\Client::getInstance()
                    ->getDataStore()
                    {{#if (ne this.operation.consumes.[0] "application/json")}}
                    ->setAcceptHeader("{{this.operation.consumes.[0]}}")
                    {{/if}}
                    {{#if (ne this.operation.produces.[0] "application/json")}}
                    ->setContentTypeHeader("{{this.operation.produces.[0]}}")
                    {{/if}}
                    ->getResource(
                        $query,
                        \\{{this.defaultReturnType}}::class,
                        "{{getCrudOperationPath this}}"
                    );
        return $application->convertFromGenericApplication();
    }
        {{else}}
    public function get($query)
    {
        return \Okta\Client::getInstance()
                    ->getDataStore()
                    {{#if (ne this.operation.consumes.[0] "application/json")}}
                    ->setAcceptHeader("{{this.operation.consumes.[0]}}")
                    {{/if}}
                    {{#if (ne this.operation.produces.[0] "application/json")}}
                    ->setContentTypeHeader("{{this.operation.produces.[0]}}")
                    {{/if}}
                    ->getResource(
                        $query,
                        \\{{this.defaultReturnType}}::class,
                        "{{getCrudOperationPath this}}"
                    );
    }
        {{/if}}
    {{/if}}
    {{#if (eq alias "create")}}
    public function create($query = [])
    {
        return \Okta\Client::getInstance()
                ->getDataStore()
                {{#if (ne this.operation.consumes.[0] "application/json")}}
                ->setAcceptHeader("{{this.operation.consumes.[0]}}")
                {{/if}}
                {{#if (ne this.operation.produces.[0] "application/json")}}
                ->setContentTypeHeader("{{this.operation.produces.[0]}}")
                {{/if}}
                ->createResource(
                    "{{getCrudOperationPath this}}",
                    $this,
                    \\{{this.defaultReturnType}}::class,
                    $query
                );
    }

    {{/if}}
    {{#if (eq alias "update")}}
        {{#if (eq this.operation.operationId "updateApplicationUser")}}
    {{> updateApplicationUser }}
        {{else}}

    public function save()
    {
        return \Okta\Client::getInstance()
                ->getDataStore()
                {{#if (ne this.operation.consumes.[0] "application/json")}}
                ->setAcceptHeader("{{this.operation.consumes.[0]}}")
                {{/if}}
                {{#if (ne this.operation.produces.[0] "application/json")}}
                ->setContentTypeHeader("{{this.operation.produces.[0]}}")
                {{/if}}
                ->saveResource(
                    "{{getCrudOperationPath this}}",
                    $this,
                    \\{{this.defaultReturnType}}::class
                );
    }

        {{/if}}
    {{/if}}
    {{#if (eq alias "delete")}}
        {{#if (eq this.operation.operationId "deleteApplicationUser")}}
    {{> deleteApplicationUser }}
        {{else if (eq this.operation.operationId "deleteApplicationGroupAssignment")}}
    {{> deleteApplicationGroupAssignment }}
        {{else}}
    {{#unless (eq this.operation.operationId "deleteFactor")}}

    public function delete() //test
    {
        return \Okta\Client::getInstance()
                ->getDataStore()
                {{#if (ne this.operation.consumes.[0] "application/json")}}
                ->setAcceptHeader("{{this.operation.consumes.[0]}}")
                {{/if}}
                {{#if (ne this.operation.produces.[0] "application/json")}}
                ->setContentTypeHeader("{{this.operation.produces.[0]}}")
                {{/if}}
                ->deleteResource(
                    "{{getCrudOperationPath this}}",
                    $this
                );
    }
    {{/unless}}
        {{/if}}
    {{/if}}
    {{/each}}
    {{#each properties}}
    {{#unless this.default}}

    /**
     * Get the {{propertyName}}.
     *
     * @return {{getType this baseClass}}
     */
    {{#if isObject}}
    public function get{{pascalCase propertyName}}(array $options = []){{getSafeType this baseClass}}
    {
        return $this->getResourceProperty(
            self::{{mySnakeCase propertyName}},
            \Okta\\{{getFirstTagFromReference this.reference}}\\{{model}}::class,
            $options
        );
    }
    {{#unless readOnly}}

    /**
     * Set the {{propertyName}}.
     *
     * @param {{getTypeHint this}} ${{propertyName}} The {{model}} instance.
     * @return self
     */
    public function set{{pascalCase propertyName}}({{getTypeHint this}} ${{propertyName}})
    {
        $this->setResourceProperty(
            self::{{mySnakeCase propertyName}},
            ${{propertyName}}
        );

        return $this;
    }
    {{/unless}}
    {{else}}
    public function get{{pascalCase propertyName}}(){{getSafeType this baseClass}}
    {
        return $this->{{getAccessMethodType this}}(self::{{mySnakeCase propertyName}});
    }
    {{#unless readOnly}}

    /**
    * Set the {{propertyName}}.
    *
    * @param mixed ${{propertyName}} The value to set.
    * @return self
    */
    public function set{{pascalCase propertyName}}(${{propertyName}})
    {
        $this->setProperty(
            self::{{mySnakeCase propertyName}},
            ${{propertyName}}
        );

        return $this;
    }
    {{/unless}}
    {{/if}}
    {{/unless}}
    {{/each}}
    {{#each methods}}

    {{#if operation.isArray}}
    /**
    * Get the {{operation.responseModel}} object.
    *
    * @param array $options The options for the request.
    * @return {{getCollectionName this}}
    */
    public function {{getMethodArrayName alias}}({{{getCollectionMethodParams this}}}): {{getCollectionName this}}
    {

        return $this
                ->getDataStore()
                {{#if (ne this.operation.consumes.[0] "application/json")}}
                ->setAcceptHeader("{{this.operation.consumes.[0]}}")
                {{/if}}
                {{#if (ne this.operation.produces.[0] "application/json")}}
                ->setContentTypeHeader("{{this.operation.produces.[0]}}")
                {{/if}}
                ->getCollection(
                    "{{{getMethodPath this}}}",
                    {{getClassNameForCollection this}}::class,
                    {{getCollectionName this}}::class,
                    $options
                );
    }
    {{else}}

    /**
    {{#if this.operation.description}}
    * {{this.operation.description}}
    *
    {{/if}}
    {{#if method.operation.queryParams}}
    {{getMethodParamsComment this}}
    {{/if}}
    * @return mixed|null
    */
    public function {{camelCase alias}}({{{getMethodParams this}}})
    {
        $uri = "{{{getMethodPath this}}}";
        $uri = $this->getDataStore()->buildUri(
            $this->getDataStore()->getOrganizationUrl() . $uri
        );
        $body = $this
                ->getDataStore()
                {{#if (ne this.operation.consumes.[0] "application/json")}}
                ->setAcceptHeader("{{this.operation.consumes.[0]}}")
                {{/if}}
                {{#if (ne this.operation.produces.[0] "application/json")}}
                ->setContentTypeHeader("{{this.operation.produces.[0]}}")
                {{/if}}
                ->executeRequest({{{getMethodRequestParams this}}}{{path}});

        {{#if this.operation.responseModel}}
            {{#if (eq this.operation.responseModel "Factor")}}
        $response =  new \Okta\\{{{pluralize this.operation.tags.[0] }}}\\{{this.operation.responseModel}}(null, $body);
        return $response->convertFromGenericFactor();
            {{else}}
        return new \Okta\\{{{pluralize this.operation.tags.[0] }}}\\{{this.operation.responseModel}}(null, $body);
            {{/if}}
        {{else}}
        return $body;
        {{/if}}
    }
    {{/if}}
    {{/each}}
    {{#if (eq modelName "Application")}}

    {{> convertFromGenericApplication }}

    {{/if}}
    {{#if (eq modelName "UserFactor")}}

    {{> convertFromGenericFactor }}

    {{/if}}
}
