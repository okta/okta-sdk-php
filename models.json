{
  modelName: 'ActivateFactorRequest',
  properties: [
    { propertyName: 'attestation', commonType: 'string' },
    { propertyName: 'clientData', commonType: 'string' },
    { propertyName: 'passCode', commonType: 'string' },
    { propertyName: 'registrationData', commonType: 'string' },
    { propertyName: 'stateToken', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'UserFactor' ]
}
{
  modelName: 'AppAndInstanceConditionEvaluatorAppOrInstance',
  properties: [
    { readOnly: true, propertyName: 'id', commonType: 'string' },
    { propertyName: 'name', commonType: 'string' },
    { enum: [Array], propertyName: 'type', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'AppAndInstancePolicyRuleCondition',
  properties: [
    {
      propertyName: 'exclude',
      commonType: 'array',
      isArray: true,
      model: 'AppAndInstanceConditionEvaluatorAppOrInstance'
    },
    {
      propertyName: 'include',
      commonType: 'array',
      isArray: true,
      model: 'AppAndInstanceConditionEvaluatorAppOrInstance'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'AppInstancePolicyRuleCondition',
  properties: [
    {
      propertyName: 'exclude',
      commonType: 'array',
      isArray: true,
      model: 'string'
    },
    {
      propertyName: 'include',
      commonType: 'array',
      isArray: true,
      model: 'string'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'AppLink',
  properties: [
    {
      readOnly: true,
      propertyName: 'appAssignmentId',
      commonType: 'string'
    },
    {
      readOnly: true,
      propertyName: 'appInstanceId',
      commonType: 'string'
    },
    { readOnly: true, propertyName: 'appName', commonType: 'string' },
    {
      readOnly: true,
      propertyName: 'credentialsSetup',
      commonType: 'boolean'
    },
    { readOnly: true, propertyName: 'hidden', commonType: 'boolean' },
    { readOnly: true, propertyName: 'id', commonType: 'string' },
    { readOnly: true, propertyName: 'label', commonType: 'string' },
    { readOnly: true, propertyName: 'linkUrl', commonType: 'string' },
    { readOnly: true, propertyName: 'logoUrl', commonType: 'string' },
    {
      readOnly: true,
      propertyName: 'sortOrder',
      commonType: 'integer'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'User' ]
}
{
  modelName: 'AppUser',
  properties: [
    {
      readOnly: true,
      propertyName: '_embedded',
      commonType: 'hash',
      isHash: true,
      model: 'object'
    },
    {
      readOnly: true,
      propertyName: '_links',
      commonType: 'hash',
      isHash: true,
      model: 'object'
    },
    { readOnly: true, propertyName: 'created', commonType: 'dateTime' },
    {
      '$ref': '#/definitions/AppUserCredentials',
      propertyName: 'credentials',
      commonType: 'object',
      isObject: true,
      model: 'AppUserCredentials'
    },
    {
      readOnly: true,
      propertyName: 'externalId',
      commonType: 'string'
    },
    { propertyName: 'id', commonType: 'string' },
    {
      readOnly: true,
      propertyName: 'lastSync',
      commonType: 'dateTime'
    },
    {
      readOnly: true,
      propertyName: 'lastUpdated',
      commonType: 'dateTime'
    },
    {
      readOnly: true,
      propertyName: 'passwordChanged',
      commonType: 'dateTime'
    },
    {
      propertyName: 'profile',
      commonType: 'hash',
      isHash: true,
      model: 'object'
    },
    { propertyName: 'scope', commonType: 'string' },
    { readOnly: true, propertyName: 'status', commonType: 'string' },
    {
      readOnly: true,
      propertyName: 'statusChanged',
      commonType: 'dateTime'
    },
    { readOnly: true, propertyName: 'syncState', commonType: 'string' }
  ],
  methods: [],
  crud: [
    { alias: 'update', arguments: [Array], operation: [Object] },
    { alias: 'delete', arguments: [Array], operation: [Object] }
  ],
  tags: [ 'Application' ]
}
{
  modelName: 'AppUserCredentials',
  properties: [
    {
      '$ref': '#/definitions/AppUserPasswordCredential',
      propertyName: 'password',
      commonType: 'object',
      isObject: true,
      model: 'AppUserPasswordCredential'
    },
    { propertyName: 'userName', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ]
}
{
  modelName: 'AppUserPasswordCredential',
  properties: [ { propertyName: 'value', commonType: 'password' } ],
  methods: [],
  crud: [],
  tags: [ 'Application' ]
}
{
  modelName: 'Application',
  properties: [
    {
      readOnly: true,
      propertyName: '_embedded',
      commonType: 'hash',
      isHash: true,
      model: 'object'
    },
    {
      readOnly: true,
      propertyName: '_links',
      commonType: 'hash',
      isHash: true,
      model: 'object'
    },
    {
      '$ref': '#/definitions/ApplicationAccessibility',
      propertyName: 'accessibility',
      commonType: 'object',
      isObject: true,
      model: 'ApplicationAccessibility'
    },
    { readOnly: true, propertyName: 'created', commonType: 'dateTime' },
    {
      '$ref': '#/definitions/ApplicationCredentials',
      propertyName: 'credentials',
      commonType: 'object',
      isObject: true,
      model: 'ApplicationCredentials'
    },
    {
      propertyName: 'features',
      commonType: 'array',
      isArray: true,
      model: 'string'
    },
    { readOnly: true, propertyName: 'id', commonType: 'string' },
    { propertyName: 'label', commonType: 'string' },
    {
      readOnly: true,
      propertyName: 'lastUpdated',
      commonType: 'dateTime'
    },
    {
      '$ref': '#/definitions/ApplicationLicensing',
      propertyName: 'licensing',
      commonType: 'object',
      isObject: true,
      model: 'ApplicationLicensing'
    },
    { readOnly: true, propertyName: 'name', commonType: 'string' },
    {
      propertyName: 'profile',
      commonType: 'hash',
      isHash: true,
      model: 'object'
    },
    {
      '$ref': '#/definitions/ApplicationSettings',
      propertyName: 'settings',
      commonType: 'object',
      isObject: true,
      model: 'ApplicationSettings'
    },
    {
      '$ref': '#/definitions/ApplicationSignOnMode',
      propertyName: 'signOnMode',
      commonType: 'enum',
      isEnum: true,
      model: 'ApplicationSignOnMode'
    },
    {
      enum: [Array],
      readOnly: true,
      propertyName: 'status',
      commonType: 'string'
    },
    {
      '$ref': '#/definitions/ApplicationVisibility',
      propertyName: 'visibility',
      commonType: 'object',
      isObject: true,
      model: 'ApplicationVisibility'
    }
  ],
  methods: [
  {
    alias: 'activate',
    arguments: [ { dest: 'appId', src: 'id' } ],
    operation: {
      path: '/api/v1/apps/{appId}/lifecycle/activate',
      method: 'post',
      queryParams: [],
      pathParams: [ { in: 'path', name: 'appId', required: true, type: 'string' } ],
      operationId: 'activateApplication',
      description: 'Activates an inactive application.',
      summary: 'Activate Application',
      tags: [ 'Application' ],
      consumes: [ 'application/json' ],
      produces: [ 'application/json' ],
      parameters: [ { in: 'path', name: 'appId', required: true, type: 'string' } ]
    }
  },
  {
    alias: 'deactivate',
    arguments: [ { dest: 'appId', src: 'id' } ],
    operation: {
      path: '/api/v1/apps/{appId}/lifecycle/deactivate',
      method: 'post',
      queryParams: [],
      pathParams: [ { in: 'path', name: 'appId', required: true, type: 'string' } ],
      operationId: 'deactivateApplication',
      description: 'Deactivates an active application.',
      summary: 'Deactivate Application',
      tags: [ 'Application' ],
      consumes: [ 'application/json' ],
      produces: [ 'application/json' ],
      parameters: [ { in: 'path', name: 'appId', required: true, type: 'string' } ]
    }
  },
  {
    alias: 'listApplicationUsers',
    arguments: [ { dest: 'appId', src: 'id' } ],
    operation: {
      path: '/api/v1/apps/{appId}/users',
      method: 'get',
      queryParams: [
        { in: 'query', name: 'q', type: 'string' },
        { in: 'query', name: 'query_scope', type: 'string' },
        {
          description: 'specifies the pagination cursor for the next page of assignments',
          in: 'query',
          name: 'after',
          type: 'string'
        },
        {
          default: -1,
          description: 'specifies the number of results for a page',
          format: 'int32',
          in: 'query',
          name: 'limit',
          type: 'integer'
        },
        { in: 'query', name: 'filter', type: 'string' },
        { in: 'query', name: 'expand', type: 'string' }
      ],
      pathParams: [ { in: 'path', name: 'appId', required: true, type: 'string' } ],
      operationId: 'listApplicationUsers',
      description: 'Enumerates all assigned [application users](#application-user-model) for an application.',
      summary: 'List Users Assigned to Application',
      tags: [ 'Application' ],
      consumes: [ 'application/json' ],
      produces: [ 'application/json' ],
      parameters: [
        { in: 'path', name: 'appId', required: true, type: 'string' },
        { in: 'query', name: 'q', type: 'string' },
        { in: 'query', name: 'query_scope', type: 'string' },
        {
          description: 'specifies the pagination cursor for the next page of assignments',
          in: 'query',
          name: 'after',
          type: 'string'
        },
        {
          default: -1,
          description: 'specifies the number of results for a page',
          format: 'int32',
          in: 'query',
          name: 'limit',
          type: 'integer'
        },
        { in: 'query', name: 'filter', type: 'string' },
        { in: 'query', name: 'expand', type: 'string' }
      ],
      responseModel: 'AppUser',
      isArray: true
    }
  },
  {
    alias: 'assignUserToApplication',
    arguments: [ { dest: 'appId', src: 'id' } ],
    operation: {
      path: '/api/v1/apps/{appId}/users',
      method: 'post',
      queryParams: [],
      pathParams: [ { in: 'path', name: 'appId', required: true, type: 'string' } ],
      operationId: 'assignUserToApplication',
      description: 'Assigns an user to an application with [credentials](#application-user-credentials-object) and an app-specific [profile](#application-user-profile-object). Profile mappings defined for the application are first applied before applying any profile properties specified in the request.',
      summary: 'Assign User to Application for SSO & Provisioning',
      tags: [ 'Application' ],
      consumes: [ 'application/json' ],
      produces: [ 'application/json' ],
      parameters: [
        { in: 'path', name: 'appId', required: true, type: 'string' },
        {
          in: 'body',
          name: 'appUser',
          required: true,
          schema: { '$ref': '#/definitions/AppUser' }
        }
      ],
      bodyModel: 'AppUser',
      responseModel: 'AppUser'
    }
  },
  {
    alias: 'getApplicationUser',
    arguments: [ { dest: 'appId', src: 'id' } ],
    operation: {
      path: '/api/v1/apps/{appId}/users/{userId}',
      method: 'get',
      queryParams: [ { in: 'query', name: 'expand', type: 'string' } ],
      pathParams: [
        { in: 'path', name: 'appId', required: true, type: 'string' },
        { in: 'path', name: 'userId', required: true, type: 'string' }
      ],
      operationId: 'getApplicationUser',
      description: 'Fetches a specific user assignment for application by `id`.',
      summary: 'Get Assigned User for Application',
      tags: [ 'Application' ],
      consumes: [ 'application/json' ],
      produces: [ 'application/json' ],
      parameters: [
        { in: 'path', name: 'appId', required: true, type: 'string' },
        { in: 'path', name: 'userId', required: true, type: 'string' },
        { in: 'query', name: 'expand', type: 'string' }
      ],
      responseModel: 'AppUser'
    }
  },
  {
    alias: 'createApplicationGroupAssignment',
    arguments: [ { dest: 'appId', src: 'id' } ],
    operation: {
      path: '/api/v1/apps/{appId}/groups/{groupId}',
      method: 'put',
      queryParams: [],
      pathParams: [
        { in: 'path', name: 'appId', required: true, type: 'string' },
        { in: 'path', name: 'groupId', required: true, type: 'string' }
      ],
      operationId: 'createApplicationGroupAssignment',
      description: 'Assigns a group to an application',
      summary: 'Assign Group to Application',
      tags: [ 'Application' ],
      consumes: [ 'application/json' ],
      produces: [ 'application/json' ],
      parameters: [
        { in: 'path', name: 'appId', required: true, type: 'string' },
        { in: 'path', name: 'groupId', required: true, type: 'string' },
        {
          in: 'body',
          name: 'applicationGroupAssignment',
          required: true,
          schema: { '$ref': '#/definitions/ApplicationGroupAssignment' }
        }
      ],
      bodyModel: 'ApplicationGroupAssignment',
      responseModel: 'ApplicationGroupAssignment'
    }
  },
  {
    alias: 'getApplicationGroupAssignment',
    arguments: [ { dest: 'appId', src: 'id' } ],
    operation: {
      path: '/api/v1/apps/{appId}/groups/{groupId}',
      method: 'get',
      queryParams: [ { in: 'query', name: 'expand', type: 'string' } ],
      pathParams: [
        { in: 'path', name: 'appId', required: true, type: 'string' },
        { in: 'path', name: 'groupId', required: true, type: 'string' }
      ],
      operationId: 'getApplicationGroupAssignment',
      description: 'Fetches an application group assignment',
      summary: 'Get Assigned Group for Application',
      tags: [ 'Application' ],
      consumes: [ 'application/json' ],
      produces: [ 'application/json' ],
      parameters: [
        { in: 'path', name: 'appId', required: true, type: 'string' },
        { in: 'path', name: 'groupId', required: true, type: 'string' },
        { in: 'query', name: 'expand', type: 'string' }
      ],
      responseModel: 'ApplicationGroupAssignment'
    }
  },
  {
    alias: 'cloneApplicationKey',
    arguments: [ { dest: 'appId', src: 'id' } ],
    operation: {
      path: '/api/v1/apps/{appId}/credentials/keys/{keyId}/clone',
      method: 'post',
      queryParams: [
        {
          description: 'Unique key of the target Application',
          in: 'query',
          name: 'targetAid',
          required: true,
          type: 'string'
        }
      ],
      pathParams: [
        { in: 'path', name: 'appId', required: true, type: 'string' },
        { in: 'path', name: 'keyId', required: true, type: 'string' }
      ],
      operationId: 'cloneApplicationKey',
      description: 'Clones a X.509 certificate for an application key credential from a source application to target application.',
      summary: 'Clone Application Key Credential',
      tags: [ 'Application' ],
      consumes: [ 'application/json' ],
      produces: [ 'application/json' ],
      parameters: [
        { in: 'path', name: 'appId', required: true, type: 'string' },
        { in: 'path', name: 'keyId', required: true, type: 'string' },
        {
          description: 'Unique key of the target Application',
          in: 'query',
          name: 'targetAid',
          required: true,
          type: 'string'
        }
      ],
      responseModel: 'JsonWebKey'
    }
  },
  {
    alias: 'getApplicationKey',
    arguments: [ { dest: 'appId', src: 'id' } ],
    operation: {
      path: '/api/v1/apps/{appId}/credentials/keys/{keyId}',
      method: 'get',
      queryParams: [],
      pathParams: [
        { in: 'path', name: 'appId', required: true, type: 'string' },
        { in: 'path', name: 'keyId', required: true, type: 'string' }
      ],
      operationId: 'getApplicationKey',
      description: 'Gets a specific application key credential by kid',
      summary: 'Get Key Credential for Application',
      tags: [ 'Application' ],
      consumes: [ 'application/json' ],
      produces: [ 'application/json' ],
      parameters: [
        { in: 'path', name: 'appId', required: true, type: 'string' },
        { in: 'path', name: 'keyId', required: true, type: 'string' }
      ],
      responseModel: 'JsonWebKey'
    }
  },
  {
    alias: 'listGroupAssignments',
    arguments: [ { dest: 'appId', src: 'id' } ],
    operation: {
      path: '/api/v1/apps/{appId}/groups',
      method: 'get',
      queryParams: [
        { in: 'query', name: 'q', type: 'string' },
        {
          description: 'Specifies the pagination cursor for the next page of assignments',
          in: 'query',
          name: 'after',
          type: 'string'
        },
        {
          default: -1,
          description: 'Specifies the number of results for a page',
          format: 'int32',
          in: 'query',
          name: 'limit',
          type: 'integer'
        },
        { in: 'query', name: 'expand', type: 'string' }
      ],
      pathParams: [ { in: 'path', name: 'appId', required: true, type: 'string' } ],
      operationId: 'listApplicationGroupAssignments',
      description: 'Enumerates group assignments for an application.',
      summary: 'List Groups Assigned to Application',
      tags: [ 'Application' ],
      consumes: [ 'application/json' ],
      produces: [ 'application/json' ],
      parameters: [
        { in: 'path', name: 'appId', required: true, type: 'string' },
        { in: 'query', name: 'q', type: 'string' },
        {
          description: 'Specifies the pagination cursor for the next page of assignments',
          in: 'query',
          name: 'after',
          type: 'string'
        },
        {
          default: -1,
          description: 'Specifies the number of results for a page',
          format: 'int32',
          in: 'query',
          name: 'limit',
          type: 'integer'
        },
        { in: 'query', name: 'expand', type: 'string' }
      ],
      responseModel: 'ApplicationGroupAssignment',
      isArray: true
    }
  },
  {
    alias: 'listKeys',
    arguments: [ { dest: 'appId', src: 'id' } ],
    operation: {
      path: '/api/v1/apps/{appId}/credentials/keys',
      method: 'get',
      queryParams: [],
      pathParams: [ { in: 'path', name: 'appId', required: true, type: 'string' } ],
      operationId: 'listApplicationKeys',
      description: 'Enumerates key credentials for an application',
      summary: 'List Key Credentials for Application',
      tags: [ 'Application' ],
      consumes: [ 'application/json' ],
      produces: [ 'application/json' ],
      parameters: [ { in: 'path', name: 'appId', required: true, type: 'string' } ],
      responseModel: 'JsonWebKey',
      isArray: true
    }
  },
  {
    alias: 'generateKey',
    arguments: [ { dest: 'appId', src: 'id' } ],
    operation: {
      path: '/api/v1/apps/{appId}/credentials/keys/generate',
      method: 'post',
      queryParams: [ { in: 'query', name: 'validityYears', type: 'integer' } ],
      pathParams: [ { in: 'path', name: 'appId', required: true, type: 'string' } ],
      operationId: 'generateApplicationKey',
      description: 'Generates a new X.509 certificate for an application key credential',
      tags: [ 'Application' ],
      consumes: [ 'application/json' ],
      produces: [ 'application/json' ],
      parameters: [
        { in: 'path', name: 'appId', required: true, type: 'string' },
        { in: 'query', name: 'validityYears', type: 'integer' }
      ],
      responseModel: 'JsonWebKey'
    }
  },
  {
    alias: 'generateCsr',
    arguments: [ { dest: 'appId', src: 'id' } ],
    operation: {
      path: '/api/v1/apps/{appId}/credentials/csrs',
      method: 'post',
      queryParams: [],
      pathParams: [ { in: 'path', name: 'appId', required: true, type: 'string' } ],
      operationId: 'generateCsrForApplication',
      description: 'Generates a new key pair and returns the Certificate Signing Request for it.',
      summary: 'Generate Certificate Signing Request for Application',
      tags: [ 'Application' ],
      consumes: [ 'application/json' ],
      produces: [ 'application/json' ],
      parameters: [
        { in: 'path', name: 'appId', required: true, type: 'string' },
        {
          in: 'body',
          name: 'metadata',
          required: true,
          schema: { '$ref': '#/definitions/CsrMetadata' }
        }
      ],
      bodyModel: 'CsrMetadata',
      responseModel: 'Csr'
    }
  },
  {
    alias: 'getCsr',
    arguments: [ { dest: 'appId', src: 'id' } ],
    operation: {
      path: '/api/v1/apps/{appId}/credentials/csrs/{csrId}',
      method: 'get',
      queryParams: [],
      pathParams: [
        { in: 'path', name: 'appId', required: true, type: 'string' },
        { in: 'path', name: 'csrId', required: true, type: 'string' }
      ],
      operationId: 'getCsrForApplication',
      tags: [ 'Application' ],
      consumes: [ 'application/json' ],
      produces: [ 'application/json' ],
      parameters: [
        { in: 'path', name: 'appId', required: true, type: 'string' },
        { in: 'path', name: 'csrId', required: true, type: 'string' }
      ],
      responseModel: 'Csr'
    }
  },
  {
    alias: 'revokeCsr',
    arguments: [ { dest: 'appId', src: 'id' } ],
    operation: {
      path: '/api/v1/apps/{appId}/credentials/csrs/{csrId}',
      method: 'delete',
      queryParams: [],
      pathParams: [
        { in: 'path', name: 'appId', required: true, type: 'string' },
        { in: 'path', name: 'csrId', required: true, type: 'string' }
      ],
      operationId: 'revokeCsrFromApplication',
      tags: [ 'Application' ],
      consumes: [ 'application/json' ],
      produces: [ 'application/json' ],
      parameters: [
        { in: 'path', name: 'appId', required: true, type: 'string' },
        { in: 'path', name: 'csrId', required: true, type: 'string' }
      ]
    }
  },
  {
    alias: 'listCsrs',
    arguments: [ { dest: 'appId', src: 'id' } ],
    operation: {
      path: '/api/v1/apps/{appId}/credentials/csrs',
      method: 'get',
      queryParams: [],
      pathParams: [ { in: 'path', name: 'appId', required: true, type: 'string' } ],
      operationId: 'listCsrsForApplication',
      description: 'Enumerates Certificate Signing Requests for an application',
      summary: 'List Certificate Signing Requests for Application',
      tags: [ 'Application' ],
      consumes: [ 'application/json' ],
      produces: [ 'application/json' ],
      parameters: [ { in: 'path', name: 'appId', required: true, type: 'string' } ],
      responseModel: 'Csr',
      isArray: true
    }
  },
  {
    alias: 'publishCerCert',
    arguments: [ { dest: 'appId', src: 'id' } ],
    operation: {
      path: '/api/v1/apps/{appId}/credentials/csrs/{csrId}/lifecycle/publish',
      method: 'post',
      queryParams: [],
      pathParams: [
        { in: 'path', name: 'appId', required: true, type: 'string' },
        { in: 'path', name: 'csrId', required: true, type: 'string' }
      ],
      operationId: 'publishCerCert',
      tags: [ 'Application' ],
      consumes: [ 'application/x-x509-ca-cert' ],
      produces: [ 'application/json' ],
      encoding: 'base64',
      parameters: [
        {
          in: 'body',
          name: 'certificate',
          required: true,
          type: 'string'
        },
        { in: 'path', name: 'appId', required: true, type: 'string' },
        { in: 'path', name: 'csrId', required: true, type: 'string' }
      ],
      bodyModel: 'string',
      responseModel: 'JsonWebKey'
    }
  },
  {
    alias: 'publishBinaryCerCert',
    arguments: [ { dest: 'appId', src: 'id' } ],
    operation: {
      path: '/api/v1/apps/{appId}/credentials/csrs/{csrId}/lifecycle/publish',
      method: 'post',
      queryParams: [],
      pathParams: [
        { in: 'path', name: 'appId', required: true, type: 'string' },
        { in: 'path', name: 'csrId', required: true, type: 'string' }
      ],
      operationId: 'publishBinaryCerCert',
      tags: [ 'Application' ],
      consumes: [ 'application/x-x509-ca-cert' ],
      produces: [ 'application/json' ],
      parameters: [
        {
          format: 'binary',
          in: 'body',
          name: 'certificate',
          required: true,
          type: 'string'
        },
        { in: 'path', name: 'appId', required: true, type: 'string' },
        { in: 'path', name: 'csrId', required: true, type: 'string' }
      ],
      bodyModel: 'string',
      bodyFormat: 'binary',
      responseModel: 'JsonWebKey'
    }
  },
  {
    alias: 'publishDerCert',
    arguments: [ { dest: 'appId', src: 'id' } ],
    operation: {
      path: '/api/v1/apps/{appId}/credentials/csrs/{csrId}/lifecycle/publish',
      method: 'post',
      queryParams: [],
      pathParams: [
        { in: 'path', name: 'appId', required: true, type: 'string' },
        { in: 'path', name: 'csrId', required: true, type: 'string' }
      ],
      operationId: 'publishDerCert',
      tags: [ 'Application' ],
      consumes: [ 'application/pkix-cert' ],
      produces: [ 'application/json' ],
      encoding: 'base64',
      parameters: [
        {
          in: 'body',
          name: 'certificate',
          required: true,
          type: 'string'
        },
        { in: 'path', name: 'appId', required: true, type: 'string' },
        { in: 'path', name: 'csrId', required: true, type: 'string' }
      ],
      bodyModel: 'string',
      responseModel: 'JsonWebKey'
    }
  },
  {
    alias: 'publishBinaryDerCert',
    arguments: [ { dest: 'appId', src: 'id' } ],
    operation: {
      path: '/api/v1/apps/{appId}/credentials/csrs/{csrId}/lifecycle/publish',
      method: 'post',
      queryParams: [],
      pathParams: [
        { in: 'path', name: 'appId', required: true, type: 'string' },
        { in: 'path', name: 'csrId', required: true, type: 'string' }
      ],
      operationId: 'publishBinaryDerCert',
      tags: [ 'Application' ],
      consumes: [ 'application/pkix-cert' ],
      produces: [ 'application/json' ],
      parameters: [
        {
          format: 'binary',
          in: 'body',
          name: 'certificate',
          required: true,
          type: 'string'
        },
        { in: 'path', name: 'appId', required: true, type: 'string' },
        { in: 'path', name: 'csrId', required: true, type: 'string' }
      ],
      bodyModel: 'string',
      bodyFormat: 'binary',
      responseModel: 'JsonWebKey'
    }
  },
  {
    alias: 'publishBinaryPemCert',
    arguments: [ { dest: 'appId', src: 'id' } ],
    operation: {
      path: '/api/v1/apps/{appId}/credentials/csrs/{csrId}/lifecycle/publish',
      method: 'post',
      queryParams: [],
      pathParams: [
        { in: 'path', name: 'appId', required: true, type: 'string' },
        { in: 'path', name: 'csrId', required: true, type: 'string' }
      ],
      operationId: 'publishBinaryPemCert',
      tags: [ 'Application' ],
      consumes: [ 'application/x-pem-file' ],
      produces: [ 'application/json' ],
      parameters: [
        {
          format: 'binary',
          in: 'body',
          name: 'certificate',
          required: true,
          type: 'string'
        },
        { in: 'path', name: 'appId', required: true, type: 'string' },
        { in: 'path', name: 'csrId', required: true, type: 'string' }
      ],
      bodyModel: 'string',
      bodyFormat: 'binary',
      responseModel: 'JsonWebKey'
    }
  },
  {
    alias: 'listOAuth2Tokens',
    arguments: [ { dest: 'appId', src: 'id' } ],
    operation: {
      path: '/api/v1/apps/{appId}/tokens',
      method: 'get',
      queryParams: [
        { in: 'query', name: 'expand', type: 'string' },
        { in: 'query', name: 'after', type: 'string' },
        {
          default: 20,
          format: 'int32',
          in: 'query',
          name: 'limit',
          type: 'integer'
        }
      ],
      pathParams: [ { in: 'path', name: 'appId', required: true, type: 'string' } ],
      operationId: 'listOAuth2TokensForApplication',
      description: 'Lists all tokens for the application',
      tags: [ 'Application' ],
      consumes: [ 'application/json' ],
      produces: [ 'application/json' ],
      parameters: [
        { in: 'path', name: 'appId', required: true, type: 'string' },
        { in: 'query', name: 'expand', type: 'string' },
        { in: 'query', name: 'after', type: 'string' },
        {
          default: 20,
          format: 'int32',
          in: 'query',
          name: 'limit',
          type: 'integer'
        }
      ],
      responseModel: 'OAuth2Token',
      isArray: true
    }
  },
  {
    alias: 'revokeOAuth2TokenForApplication',
    arguments: [ { dest: 'appId', src: 'id' } ],
    operation: {
      path: '/api/v1/apps/{appId}/tokens/{tokenId}',
      method: 'delete',
      queryParams: [],
      pathParams: [
        { in: 'path', name: 'appId', required: true, type: 'string' },
        { in: 'path', name: 'tokenId', required: true, type: 'string' }
      ],
      operationId: 'revokeOAuth2TokenForApplication',
      description: 'Revokes the specified token for the specified application',
      tags: [ 'Application' ],
      consumes: [ 'application/json' ],
      produces: [ 'application/json' ],
      parameters: [
        { in: 'path', name: 'appId', required: true, type: 'string' },
        { in: 'path', name: 'tokenId', required: true, type: 'string' }
      ]
    }
  },
  {
    alias: 'getOAuth2Token',
    arguments: [ { dest: 'appId', src: 'id' } ],
    operation: {
      path: '/api/v1/apps/{appId}/tokens/{tokenId}',
      method: 'get',
      queryParams: [ { in: 'query', name: 'expand', type: 'string' } ],
      pathParams: [
        { in: 'path', name: 'appId', required: true, type: 'string' },
        { in: 'path', name: 'tokenId', required: true, type: 'string' }
      ],
      operationId: 'getOAuth2TokenForApplication',
      description: 'Gets a token for the specified application',
      tags: [ 'Application' ],
      consumes: [ 'application/json' ],
      produces: [ 'application/json' ],
      parameters: [
        { in: 'path', name: 'appId', required: true, type: 'string' },
        { in: 'path', name: 'tokenId', required: true, type: 'string' },
        { in: 'query', name: 'expand', type: 'string' }
      ],
      responseModel: 'OAuth2Token'
    }
  },
  {
    alias: 'revokeOAuth2Tokens',
    arguments: [ { dest: 'appId', src: 'id' } ],
    operation: {
      path: '/api/v1/apps/{appId}/tokens',
      method: 'delete',
      queryParams: [],
      pathParams: [ { in: 'path', name: 'appId', required: true, type: 'string' } ],
      operationId: 'revokeOAuth2TokensForApplication',
      description: 'Revokes all tokens for the specified application',
      tags: [ 'Application' ],
      consumes: [ 'application/json' ],
      produces: [ 'application/json' ],
      parameters: [ { in: 'path', name: 'appId', required: true, type: 'string' } ]
    }
  },
  {
    alias: 'listScopeConsentGrants',
    arguments: [ { dest: 'appId', src: 'id' } ],
    operation: {
      path: '/api/v1/apps/{appId}/grants',
      method: 'get',
      queryParams: [ { in: 'query', name: 'expand', type: 'string' } ],
      pathParams: [ { in: 'path', name: 'appId', required: true, type: 'string' } ],
      operationId: 'listScopeConsentGrants',
      description: 'Lists all scope consent grants for the application',
      tags: [ 'Application' ],
      consumes: [ 'application/json' ],
      produces: [ 'application/json' ],
      parameters: [
        { in: 'path', name: 'appId', required: true, type: 'string' },
        { in: 'query', name: 'expand', type: 'string' }
      ],
      responseModel: 'OAuth2ScopeConsentGrant',
      isArray: true
    }
  },
  {
    alias: 'grantConsentToScope',
    arguments: [ { dest: 'appId', src: 'id' } ],
    operation: {
      path: '/api/v1/apps/{appId}/grants',
      method: 'post',
      queryParams: [],
      pathParams: [ { in: 'path', name: 'appId', required: true, type: 'string' } ],
      operationId: 'grantConsentToScope',
      description: 'Grants consent for the application to request an OAuth 2.0 Okta scope',
      tags: [ 'Application' ],
      consumes: [ 'application/json' ],
      produces: [ 'application/json' ],
      parameters: [
        { in: 'path', name: 'appId', required: true, type: 'string' },
        {
          in: 'body',
          name: 'oAuth2ScopeConsentGrant',
          required: true,
          schema: { '$ref': '#/definitions/OAuth2ScopeConsentGrant' }
        }
      ],
      bodyModel: 'OAuth2ScopeConsentGrant',
      responseModel: 'OAuth2ScopeConsentGrant'
    }
  },
  {
    alias: 'revokeScopeConsentGrant',
    arguments: [ { dest: 'appId', src: 'id' } ],
    operation: {
      path: '/api/v1/apps/{appId}/grants/{grantId}',
      method: 'delete',
      queryParams: [],
      pathParams: [
        { in: 'path', name: 'appId', required: true, type: 'string' },
        { in: 'path', name: 'grantId', required: true, type: 'string' }
      ],
      operationId: 'revokeScopeConsentGrant',
      description: 'Revokes permission for the application to request the given scope',
      tags: [ 'Application' ],
      consumes: [ 'application/json' ],
      produces: [ 'application/json' ],
      parameters: [
        { in: 'path', name: 'appId', required: true, type: 'string' },
        { in: 'path', name: 'grantId', required: true, type: 'string' }
      ]
    }
  },
  {
    alias: 'getScopeConsentGrant',
    arguments: [ { dest: 'appId', src: 'id' } ],
    operation: {
      path: '/api/v1/apps/{appId}/grants/{grantId}',
      method: 'get',
      queryParams: [ { in: 'query', name: 'expand', type: 'string' } ],
      pathParams: [
        { in: 'path', name: 'appId', required: true, type: 'string' },
        { in: 'path', name: 'grantId', required: true, type: 'string' }
      ],
      operationId: 'getScopeConsentGrant',
      description: 'Fetches a single scope consent grant for the application',
      tags: [ 'Application' ],
      consumes: [ 'application/json' ],
      produces: [ 'application/json' ],
      parameters: [
        { in: 'path', name: 'appId', required: true, type: 'string' },
        { in: 'path', name: 'grantId', required: true, type: 'string' },
        { in: 'query', name: 'expand', type: 'string' }
      ],
      responseModel: 'OAuth2ScopeConsentGrant'
    }
  }
],
  crud: [
    {
      alias: 'read',
      arguments: [ { dest: 'appId', src: 'id' } ],
      operation: {
        path: '/api/v1/apps/{appId}',
        method: 'get',
        queryParams: [ { in: 'query', name: 'expand', type: 'string' } ],
        pathParams: [ { in: 'path', name: 'appId', required: true, type: 'string' } ],
        operationId: 'getApplication',
        description: 'Fetches an application from your Okta organization by `id`.',
        summary: 'Get Application',
        tags: [ 'Application' ],
        consumes: [ 'application/json' ],
        produces: [ 'application/json' ],
        parameters: [
          { in: 'path', name: 'appId', required: true, type: 'string' },
          { in: 'query', name: 'expand', type: 'string' }
        ],
        responseModel: 'Application'
      }
    },
    {
      alias: 'update',
      arguments: [
        { dest: 'appId', src: 'id' },
        { dest: 'application', self: true }
      ],
      operation: {
        path: '/api/v1/apps/{appId}',
        method: 'put',
        queryParams: [],
        pathParams: [ { in: 'path', name: 'appId', required: true, type: 'string' } ],
        operationId: 'updateApplication',
        description: 'Updates an application in your organization.',
        summary: 'Update Application',
        tags: [ 'Application' ],
        consumes: [ 'application/json' ],
        produces: [ 'application/json' ],
        parameters: [
          { in: 'path', name: 'appId', required: true, type: 'string' },
          {
            in: 'body',
            name: 'application',
            required: true,
            schema: { '$ref': '#/definitions/Application' }
          }
        ],
        bodyModel: 'Application',
        responseModel: 'Application'
      }
    },
    {
      alias: 'delete',
      arguments: [ { dest: 'appId', src: 'id' } ],
      operation: {
        path: '/api/v1/apps/{appId}',
        method: 'delete',
        queryParams: [],
        pathParams: [ { in: 'path', name: 'appId', required: true, type: 'string' } ],
        operationId: 'deleteApplication',
        description: 'Removes an inactive application.',
        summary: 'Delete Application',
        tags: [ 'Application' ],
        consumes: [ 'application/json' ],
        produces: [ 'application/json' ],
        parameters: [ { in: 'path', name: 'appId', required: true, type: 'string' } ]
      }
    }
  ],
  tags: [ 'Application' ],
  requiresResolution: true,
  resolutionStrategy: {
    propertyName: 'signOnMode',
    valueToModelMapping: {
      AUTO_LOGIN: 'AutoLoginApplication',
      BASIC_AUTH: 'BasicAuthApplication',
      BOOKMARK: 'BookmarkApplication',
      BROWSER_PLUGIN: 'BrowserPluginApplication',
      OPENID_CONNECT: 'OpenIdConnectApplication',
      SAML_2_0: 'SamlApplication',
      SECURE_PASSWORD_STORE: 'SecurePasswordStoreApplication',
      WS_FEDERATION: 'WsFederationApplication'
    }
  }
}
{
  modelName: 'ApplicationAccessibility',
  properties: [
    { propertyName: 'errorRedirectUrl', commonType: 'string' },
    { propertyName: 'loginRedirectUrl', commonType: 'string' },
    { propertyName: 'selfService', commonType: 'boolean' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ]
}
{
  modelName: 'ApplicationCredentials',
  properties: [
    {
      '$ref': '#/definitions/ApplicationCredentialsSigning',
      propertyName: 'signing',
      commonType: 'object',
      isObject: true,
      model: 'ApplicationCredentialsSigning'
    },
    {
      '$ref': '#/definitions/ApplicationCredentialsUsernameTemplate',
      propertyName: 'userNameTemplate',
      commonType: 'object',
      isObject: true,
      model: 'ApplicationCredentialsUsernameTemplate'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ]
}
{
  modelName: 'ApplicationCredentialsOAuthClient',
  properties: [
    { propertyName: 'autoKeyRotation', commonType: 'boolean' },
    { propertyName: 'client_id', commonType: 'string' },
    { propertyName: 'client_secret', commonType: 'string' },
    {
      '$ref': '#/definitions/OAuthEndpointAuthenticationMethod',
      propertyName: 'token_endpoint_auth_method',
      commonType: 'enum',
      isEnum: true,
      model: 'OAuthEndpointAuthenticationMethod'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ]
}
{
  modelName: 'ApplicationCredentialsScheme',
  enum: [
    'SHARED_USERNAME_AND_PASSWORD',
    'EXTERNAL_PASSWORD_SYNC',
    'EDIT_USERNAME_AND_PASSWORD',
    'EDIT_PASSWORD_ONLY',
    'ADMIN_SETS_CREDENTIALS'
  ],
  tags: [ 'Application' ]
}
{
  modelName: 'ApplicationCredentialsSigning',
  properties: [
    { propertyName: 'kid', commonType: 'string' },
    {
      readOnly: true,
      propertyName: 'lastRotated',
      commonType: 'dateTime'
    },
    {
      readOnly: true,
      propertyName: 'nextRotation',
      commonType: 'dateTime'
    },
    { propertyName: 'rotationMode', commonType: 'string' },
    {
      '$ref': '#/definitions/ApplicationCredentialsSigningUse',
      propertyName: 'use',
      commonType: 'enum',
      isEnum: true,
      model: 'ApplicationCredentialsSigningUse'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ]
}
{
  modelName: 'ApplicationCredentialsSigningUse',
  enum: [ 'sig' ],
  tags: [ 'AuthorizationServer' ]
}
{
  modelName: 'ApplicationCredentialsUsernameTemplate',
  properties: [
    { propertyName: 'suffix', commonType: 'string' },
    { propertyName: 'template', commonType: 'string' },
    { propertyName: 'type', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ]
}
{
  modelName: 'ApplicationGroupAssignment',
  properties: [
    {
      readOnly: true,
      propertyName: '_embedded',
      commonType: 'hash',
      isHash: true,
      model: 'object'
    },
    {
      readOnly: true,
      propertyName: '_links',
      commonType: 'hash',
      isHash: true,
      model: 'object'
    },
    { readOnly: true, propertyName: 'id', commonType: 'string' },
    {
      readOnly: true,
      propertyName: 'lastUpdated',
      commonType: 'dateTime'
    },
    { propertyName: 'priority', commonType: 'integer' },
    {
      propertyName: 'profile',
      commonType: 'hash',
      isHash: true,
      model: 'object'
    }
  ],
  methods: [],
  crud: [ { alias: 'delete', arguments: [Array], operation: [Object] } ],
  tags: [ 'Application' ]
}
{
  modelName: 'ApplicationLicensing',
  properties: [ { propertyName: 'seatCount', commonType: 'integer' } ],
  methods: [],
  crud: [],
  tags: [ 'Application' ]
}
{
  modelName: 'ApplicationSettings',
  properties: [
    {
      '$ref': '#/definitions/ApplicationSettingsApplication',
      propertyName: 'app',
      commonType: 'object',
      isObject: true,
      model: 'ApplicationSettingsApplication'
    },
    { propertyName: 'implicitAssignment', commonType: 'boolean' },
    { propertyName: 'inlineHookId', commonType: 'string' },
    {
      '$ref': '#/definitions/ApplicationSettingsNotifications',
      propertyName: 'notifications',
      commonType: 'object',
      isObject: true,
      model: 'ApplicationSettingsNotifications'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ]
}
{
  modelName: 'ApplicationSettingsApplication',
  properties: [],
  methods: [],
  crud: [],
  tags: [ 'Application' ]
}
{
  modelName: 'ApplicationSettingsNotifications',
  properties: [
    {
      '$ref': '#/definitions/ApplicationSettingsNotificationsVpn',
      propertyName: 'vpn',
      commonType: 'object',
      isObject: true,
      model: 'ApplicationSettingsNotificationsVpn'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ]
}
{
  modelName: 'ApplicationSettingsNotificationsVpn',
  properties: [
    { propertyName: 'helpUrl', commonType: 'string' },
    { propertyName: 'message', commonType: 'string' },
    {
      '$ref': '#/definitions/ApplicationSettingsNotificationsVpnNetwork',
      propertyName: 'network',
      commonType: 'object',
      isObject: true,
      model: 'ApplicationSettingsNotificationsVpnNetwork'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ]
}
{
  modelName: 'ApplicationSettingsNotificationsVpnNetwork',
  properties: [
    { propertyName: 'connection', commonType: 'string' },
    {
      propertyName: 'exclude',
      commonType: 'array',
      isArray: true,
      model: 'string'
    },
    {
      propertyName: 'include',
      commonType: 'array',
      isArray: true,
      model: 'string'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ]
}
{
  modelName: 'ApplicationSignOnMode',
  enum: [
    'BOOKMARK',
    'BASIC_AUTH',
    'BROWSER_PLUGIN',
    'SECURE_PASSWORD_STORE',
    'AUTO_LOGIN',
    'WS_FEDERATION',
    'SAML_2_0',
    'OPENID_CONNECT',
    'SAML_1_1'
  ],
  tags: [ 'Application' ]
}
{
  modelName: 'ApplicationVisibility',
  properties: [
    {
      propertyName: 'appLinks',
      commonType: 'hash',
      isHash: true,
      model: 'boolean'
    },
    { propertyName: 'autoSubmitToolbar', commonType: 'boolean' },
    {
      '$ref': '#/definitions/ApplicationVisibilityHide',
      propertyName: 'hide',
      commonType: 'object',
      isObject: true,
      model: 'ApplicationVisibilityHide'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ]
}
{
  modelName: 'ApplicationVisibilityHide',
  properties: [
    { propertyName: 'iOS', commonType: 'boolean' },
    { propertyName: 'web', commonType: 'boolean' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ]
}
{
  modelName: 'AssignRoleRequest',
  properties: [
    {
      '$ref': '#/definitions/RoleType',
      readOnly: false,
      propertyName: 'type',
      commonType: 'enum',
      isEnum: true,
      model: 'RoleType'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Role' ]
}
{
  modelName: 'AuthenticationProvider',
  properties: [
    { propertyName: 'name', commonType: 'string' },
    {
      '$ref': '#/definitions/AuthenticationProviderType',
      propertyName: 'type',
      commonType: 'enum',
      isEnum: true,
      model: 'AuthenticationProviderType'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'User' ]
}
{
  modelName: 'AuthenticationProviderType',
  enum: [
    'ACTIVE_DIRECTORY',
    'FEDERATION',
    'LDAP',
    'OKTA',
    'SOCIAL',
    'IMPORT'
  ],
  tags: [ 'User' ]
}
{
  modelName: 'AuthorizationServer',
  properties: [
    {
      readOnly: true,
      propertyName: '_links',
      commonType: 'hash',
      isHash: true,
      model: 'object'
    },
    {
      propertyName: 'audiences',
      commonType: 'array',
      isArray: true,
      model: 'string'
    },
    { readOnly: true, propertyName: 'created', commonType: 'dateTime' },
    {
      '$ref': '#/definitions/AuthorizationServerCredentials',
      propertyName: 'credentials',
      commonType: 'object',
      isObject: true,
      model: 'AuthorizationServerCredentials'
    },
    { propertyName: 'description', commonType: 'string' },
    { readOnly: true, propertyName: 'id', commonType: 'string' },
    { propertyName: 'issuer', commonType: 'string' },
    { enum: [Array], propertyName: 'issuerMode', commonType: 'string' },
    {
      readOnly: true,
      propertyName: 'lastUpdated',
      commonType: 'dateTime'
    },
    { propertyName: 'name', commonType: 'string' },
    { enum: [Array], propertyName: 'status', commonType: 'string' }
  ],
  methods: [
    {
      alias: 'listOAuth2Claims',
      arguments: [Array],
      operation: [Object]
    },
    {
      alias: 'createOAuth2Claim',
      arguments: [Array],
      operation: [Object]
    },
    {
      alias: 'deleteOAuth2Claim',
      arguments: [Array],
      operation: [Object]
    },
    {
      alias: 'getOAuth2Claim',
      arguments: [Array],
      operation: [Object]
    },
    {
      alias: 'updateOAuth2Claim',
      arguments: [Array],
      operation: [Object]
    },
    {
      alias: 'listOAuth2Clients',
      arguments: [Array],
      operation: [Object]
    },
    {
      alias: 'revokeRefreshTokensForClient',
      arguments: [Array],
      operation: [Object]
    },
    {
      alias: 'listRefreshTokensForClient',
      arguments: [Array],
      operation: [Object]
    },
    {
      alias: 'getRefreshTokenForClient',
      arguments: [Array],
      operation: [Object]
    },
    {
      alias: 'revokeRefreshTokenForClient',
      arguments: [Array],
      operation: [Object]
    },
    { alias: 'listKeys', arguments: [Array], operation: [Object] },
    { alias: 'rotateKeys', arguments: [Array], operation: [Object] },
    { alias: 'activate', arguments: [Array], operation: [Object] },
    { alias: 'deactivate', arguments: [Array], operation: [Object] },
    { alias: 'listPolicies', arguments: [Array], operation: [Object] },
    { alias: 'createPolicy', arguments: [Array], operation: [Object] },
    { alias: 'deletePolicy', arguments: [Array], operation: [Object] },
    { alias: 'getPolicy', arguments: [Array], operation: [Object] },
    { alias: 'updatePolicy', arguments: [Array], operation: [Object] },
    {
      alias: 'listOAuth2Scopes',
      arguments: [Array],
      operation: [Object]
    },
    {
      alias: 'createOAuth2Scope',
      arguments: [Array],
      operation: [Object]
    },
    {
      alias: 'deleteOAuth2Scope',
      arguments: [Array],
      operation: [Object]
    },
    {
      alias: 'getOAuth2Scope',
      arguments: [Array],
      operation: [Object]
    },
    {
      alias: 'updateOAuth2Scope',
      arguments: [Array],
      operation: [Object]
    }
  ],
  crud: [
    { alias: 'create', arguments: [Array], operation: [Object] },
    { alias: 'read', arguments: [], operation: [Object] },
    { alias: 'update', arguments: [Array], operation: [Object] },
    { alias: 'delete', arguments: [Array], operation: [Object] }
  ],
  tags: [ 'AuthorizationServer' ]
}
{
  modelName: 'AuthorizationServerCredentials',
  properties: [
    {
      '$ref': '#/definitions/AuthorizationServerCredentialsSigningConfig',
      propertyName: 'signing',
      commonType: 'object',
      isObject: true,
      model: 'AuthorizationServerCredentialsSigningConfig'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ]
}
{
  modelName: 'AuthorizationServerCredentialsRotationMode',
  enum: [ 'AUTO', 'MANUAL' ],
  tags: [ 'AuthorizationServer' ]
}
{
  modelName: 'AuthorizationServerCredentialsSigningConfig',
  properties: [
    { propertyName: 'kid', commonType: 'string' },
    {
      readOnly: true,
      propertyName: 'lastRotated',
      commonType: 'dateTime'
    },
    {
      readOnly: true,
      propertyName: 'nextRotation',
      commonType: 'dateTime'
    },
    {
      '$ref': '#/definitions/AuthorizationServerCredentialsRotationMode',
      propertyName: 'rotationMode',
      commonType: 'enum',
      isEnum: true,
      model: 'AuthorizationServerCredentialsRotationMode'
    },
    {
      '$ref': '#/definitions/AuthorizationServerCredentialsUse',
      propertyName: 'use',
      commonType: 'enum',
      isEnum: true,
      model: 'AuthorizationServerCredentialsUse'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'AuthorizationServer' ]
}
{
  modelName: 'AuthorizationServerCredentialsUse',
  enum: [ 'sig' ],
  tags: [ 'AuthorizationServer' ]
}
{
  modelName: 'AutoLoginApplication',
  properties: [
    {
      '$ref': '#/definitions/SchemeApplicationCredentials',
      propertyName: 'credentials',
      commonType: 'object',
      isObject: true,
      model: 'SchemeApplicationCredentials'
    },
    {
      '$ref': '#/definitions/AutoLoginApplicationSettings',
      propertyName: 'settings',
      commonType: 'object',
      isObject: true,
      model: 'AutoLoginApplicationSettings'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ],
  extends: 'Application'
}
{
  modelName: 'AutoLoginApplicationSettings',
  properties: [
    {
      '$ref': '#/definitions/AutoLoginApplicationSettingsSignOn',
      propertyName: 'signOn',
      commonType: 'object',
      isObject: true,
      model: 'AutoLoginApplicationSettingsSignOn'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ],
  extends: 'ApplicationSettings'
}
{
  modelName: 'AutoLoginApplicationSettingsSignOn',
  properties: [
    { propertyName: 'loginUrl', commonType: 'string' },
    { propertyName: 'redirectUrl', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ]
}
{
  modelName: 'BasicApplicationSettings',
  properties: [
    {
      '$ref': '#/definitions/BasicApplicationSettingsApplication',
      propertyName: 'app',
      commonType: 'object',
      isObject: true,
      model: 'BasicApplicationSettingsApplication'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ],
  extends: 'ApplicationSettings'
}
{
  modelName: 'BasicApplicationSettingsApplication',
  properties: [
    { propertyName: 'authURL', commonType: 'string' },
    { propertyName: 'url', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ],
  extends: 'ApplicationSettingsApplication'
}
{
  modelName: 'BasicAuthApplication',
  properties: [
    {
      '$ref': '#/definitions/SchemeApplicationCredentials',
      propertyName: 'credentials',
      commonType: 'object',
      isObject: true,
      model: 'SchemeApplicationCredentials'
    },
    {
      default: 'template_basic_auth',
      propertyName: 'name',
      commonType: 'object',
      isObject: true,
      model: undefined
    },
    {
      '$ref': '#/definitions/BasicApplicationSettings',
      propertyName: 'settings',
      commonType: 'object',
      isObject: true,
      model: 'BasicApplicationSettings'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ],
  extends: 'Application'
}
{
  modelName: 'BeforeScheduledActionPolicyRuleCondition',
  properties: [
    {
      '$ref': '#/definitions/Duration',
      propertyName: 'duration',
      commonType: 'object',
      isObject: true,
      model: 'Duration'
    },
    {
      '$ref': '#/definitions/ScheduledUserLifecycleAction',
      propertyName: 'lifecycleAction',
      commonType: 'object',
      isObject: true,
      model: 'ScheduledUserLifecycleAction'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'BookmarkApplication',
  properties: [
    {
      default: 'bookmark',
      propertyName: 'name',
      commonType: 'object',
      isObject: true,
      model: undefined
    },
    {
      '$ref': '#/definitions/BookmarkApplicationSettings',
      propertyName: 'settings',
      commonType: 'object',
      isObject: true,
      model: 'BookmarkApplicationSettings'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ],
  extends: 'Application'
}
{
  modelName: 'BookmarkApplicationSettings',
  properties: [
    {
      '$ref': '#/definitions/BookmarkApplicationSettingsApplication',
      propertyName: 'app',
      commonType: 'object',
      isObject: true,
      model: 'BookmarkApplicationSettingsApplication'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ],
  extends: 'ApplicationSettings'
}
{
  modelName: 'BookmarkApplicationSettingsApplication',
  properties: [
    { propertyName: 'requestIntegration', commonType: 'boolean' },
    { propertyName: 'url', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ],
  extends: 'ApplicationSettingsApplication'
}
{
  modelName: 'BrowserPluginApplication',
  properties: [
    {
      '$ref': '#/definitions/SchemeApplicationCredentials',
      propertyName: 'credentials',
      commonType: 'object',
      isObject: true,
      model: 'SchemeApplicationCredentials'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ],
  requiresResolution: true,
  extends: 'Application',
  resolutionStrategy: {
    propertyName: 'name',
    valueToModelMapping: {
      template_swa: 'SwaApplication',
      template_swa3field: 'SwaThreeFieldApplication'
    }
  }
}
{
  modelName: 'CallUserFactor',
  properties: [
    {
      '$ref': '#/definitions/CallUserFactorProfile',
      propertyName: 'profile',
      commonType: 'object',
      isObject: true,
      model: 'CallUserFactorProfile'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'UserFactor' ],
  extends: 'UserFactor'
}
{
  modelName: 'CallUserFactorProfile',
  properties: [
    { propertyName: 'phoneExtension', commonType: 'string' },
    { propertyName: 'phoneNumber', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'UserFactor' ]
}
{
  modelName: 'CatalogApplication',
  properties: [
    {
      readOnly: true,
      propertyName: '_links',
      commonType: 'hash',
      isHash: true,
      model: 'object'
    },
    { propertyName: 'category', commonType: 'string' },
    { propertyName: 'description', commonType: 'string' },
    { propertyName: 'displayName', commonType: 'string' },
    {
      propertyName: 'features',
      commonType: 'array',
      isArray: true,
      model: 'string'
    },
    { readOnly: true, propertyName: 'id', commonType: 'string' },
    {
      readOnly: true,
      propertyName: 'lastUpdated',
      commonType: 'dateTime'
    },
    { propertyName: 'name', commonType: 'string' },
    {
      propertyName: 'signOnModes',
      commonType: 'array',
      isArray: true,
      model: 'string'
    },
    {
      '$ref': '#/definitions/CatalogApplicationStatus',
      propertyName: 'status',
      commonType: 'enum',
      isEnum: true,
      model: 'CatalogApplicationStatus'
    },
    { propertyName: 'verificationStatus', commonType: 'string' },
    { propertyName: 'website', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Role' ]
}
{
  modelName: 'CatalogApplicationStatus',
  enum: [ 'ACTIVE', 'INACTIVE' ],
  tags: [ 'Role' ]
}
{
  modelName: 'ChangePasswordRequest',
  properties: [
    {
      '$ref': '#/definitions/PasswordCredential',
      propertyName: 'newPassword',
      commonType: 'object',
      isObject: true,
      model: 'PasswordCredential'
    },
    {
      '$ref': '#/definitions/PasswordCredential',
      propertyName: 'oldPassword',
      commonType: 'object',
      isObject: true,
      model: 'PasswordCredential'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'User' ]
}
{
  modelName: 'ClientPolicyCondition',
  properties: [
    {
      propertyName: 'include',
      commonType: 'array',
      isArray: true,
      model: 'string'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'ContextPolicyRuleCondition',
  properties: [ { propertyName: 'expression', commonType: 'string' } ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'CreateSessionRequest',
  properties: [ { propertyName: 'sessionToken', commonType: 'string' } ],
  methods: [],
  crud: [],
  tags: [ 'Session' ]
}
{
  modelName: 'CreateUserRequest',
  properties: [
    {
      '$ref': '#/definitions/UserCredentials',
      propertyName: 'credentials',
      commonType: 'object',
      isObject: true,
      model: 'UserCredentials'
    },
    {
      propertyName: 'groupIds',
      commonType: 'array',
      isArray: true,
      model: 'string'
    },
    {
      '$ref': '#/definitions/UserProfile',
      propertyName: 'profile',
      commonType: 'object',
      isObject: true,
      model: 'UserProfile'
    },
    {
      '$ref': '#/definitions/UserType',
      propertyName: 'type',
      commonType: 'object',
      isObject: true,
      model: 'UserType'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'User' ]
}
{
  modelName: 'Csr',
  properties: [
    { readOnly: true, propertyName: 'created', commonType: 'dateTime' },
    { readOnly: true, propertyName: 'csr', commonType: 'string' },
    { readOnly: true, propertyName: 'id', commonType: 'string' },
    { readOnly: true, propertyName: 'kty', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ]
}
{
  modelName: 'CsrMetadata',
  properties: [
    {
      '$ref': '#/definitions/CsrMetadataSubject',
      propertyName: 'subject',
      commonType: 'object',
      isObject: true,
      model: 'CsrMetadataSubject'
    },
    {
      '$ref': '#/definitions/CsrMetadataSubjectAltNames',
      propertyName: 'subjectAltNames',
      commonType: 'object',
      isObject: true,
      model: 'CsrMetadataSubjectAltNames'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ]
}
{
  modelName: 'CsrMetadataSubject',
  properties: [
    { propertyName: 'commonName', commonType: 'string' },
    { propertyName: 'countryName', commonType: 'string' },
    { propertyName: 'localityName', commonType: 'string' },
    { propertyName: 'organizationName', commonType: 'string' },
    { propertyName: 'organizationalUnitName', commonType: 'string' },
    { propertyName: 'stateOrProvinceName', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ]
}
{
  modelName: 'CsrMetadataSubjectAltNames',
  properties: [
    {
      propertyName: 'dnsNames',
      commonType: 'array',
      isArray: true,
      model: 'string'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ]
}
{
  modelName: 'DevicePolicyRuleCondition',
  properties: [
    { propertyName: 'migrated', commonType: 'boolean' },
    {
      '$ref': '#/definitions/DevicePolicyRuleConditionPlatform',
      propertyName: 'platform',
      commonType: 'object',
      isObject: true,
      model: 'DevicePolicyRuleConditionPlatform'
    },
    { propertyName: 'rooted', commonType: 'boolean' },
    { enum: [Array], propertyName: 'trustLevel', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'DevicePolicyRuleConditionPlatform',
  properties: [
    {
      propertyName: 'supportedMDMFrameworks',
      commonType: 'array',
      isArray: true,
      model: 'string'
    },
    {
      propertyName: 'types',
      commonType: 'array',
      isArray: true,
      model: 'string'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'Duration',
  properties: [
    { propertyName: 'number', commonType: 'integer' },
    { propertyName: 'unit', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'EmailUserFactor',
  properties: [
    {
      '$ref': '#/definitions/EmailUserFactorProfile',
      propertyName: 'profile',
      commonType: 'object',
      isObject: true,
      model: 'EmailUserFactorProfile'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'UserFactor' ],
  extends: 'UserFactor'
}
{
  modelName: 'EmailUserFactorProfile',
  properties: [ { propertyName: 'email', commonType: 'string' } ],
  methods: [],
  crud: [],
  tags: [ 'UserFactor' ]
}
{
  modelName: 'EnabledStatus',
  enum: [ 'ENABLED', 'DISABLED' ],
  tags: [ 'Common' ]
}
{
  modelName: 'EventHook',
  properties: [
    {
      readOnly: true,
      propertyName: '_links',
      commonType: 'hash',
      isHash: true,
      model: 'object'
    },
    {
      '$ref': '#/definitions/EventHookChannel',
      propertyName: 'channel',
      commonType: 'object',
      isObject: true,
      model: 'EventHookChannel'
    },
    { readOnly: true, propertyName: 'created', commonType: 'dateTime' },
    { propertyName: 'createdBy', commonType: 'string' },
    {
      '$ref': '#/definitions/EventSubscriptions',
      propertyName: 'events',
      commonType: 'object',
      isObject: true,
      model: 'EventSubscriptions'
    },
    { readOnly: true, propertyName: 'id', commonType: 'string' },
    {
      readOnly: true,
      propertyName: 'lastUpdated',
      commonType: 'dateTime'
    },
    { propertyName: 'name', commonType: 'string' },
    { enum: [Array], propertyName: 'status', commonType: 'string' },
    {
      enum: [Array],
      propertyName: 'verificationStatus',
      commonType: 'string'
    }
  ],
  methods: [
    { alias: 'activate', arguments: [Array], operation: [Object] },
    { alias: 'deactivate', arguments: [Array], operation: [Object] },
    { alias: 'verify', arguments: [Array], operation: [Object] }
  ],
  crud: [
    { alias: 'create', arguments: [Array], operation: [Object] },
    { alias: 'read', arguments: [], operation: [Object] },
    { alias: 'update', arguments: [Array], operation: [Object] },
    { alias: 'delete', arguments: [Array], operation: [Object] }
  ],
  tags: [ 'EventHook' ]
}
{
  modelName: 'EventHookChannel',
  properties: [
    {
      '$ref': '#/definitions/EventHookChannelConfig',
      readOnly: false,
      propertyName: 'config',
      commonType: 'object',
      isObject: true,
      model: 'EventHookChannelConfig'
    },
    {
      enum: [Array],
      readOnly: false,
      propertyName: 'type',
      commonType: 'string'
    },
    { readOnly: false, propertyName: 'version', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'EventHook' ]
}
{
  modelName: 'EventHookChannelConfig',
  properties: [
    {
      '$ref': '#/definitions/EventHookChannelConfigAuthScheme',
      propertyName: 'authScheme',
      commonType: 'object',
      isObject: true,
      model: 'EventHookChannelConfigAuthScheme'
    },
    {
      propertyName: 'headers',
      commonType: 'array',
      isArray: true,
      model: 'EventHookChannelConfigHeader'
    },
    { propertyName: 'uri', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'EventHook' ]
}
{
  modelName: 'EventHookChannelConfigAuthScheme',
  properties: [
    { propertyName: 'key', commonType: 'string' },
    {
      '$ref': '#/definitions/EventHookChannelConfigAuthSchemeType',
      propertyName: 'type',
      commonType: 'enum',
      isEnum: true,
      model: 'EventHookChannelConfigAuthSchemeType'
    },
    { propertyName: 'value', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'EventHook' ]
}
{
  modelName: 'EventHookChannelConfigAuthSchemeType',
  enum: [ 'HEADER' ],
  tags: [ 'EventHook' ]
}
{
  modelName: 'EventHookChannelConfigHeader',
  properties: [
    { propertyName: 'key', commonType: 'string' },
    { propertyName: 'value', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'EventHook' ]
}
{
  modelName: 'EventSubscriptions',
  properties: [
    {
      propertyName: 'items',
      commonType: 'array',
      isArray: true,
      model: 'string'
    },
    { enum: [Array], propertyName: 'type', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'EventHook' ]
}
{
  modelName: 'FactorProvider',
  enum: [ 'OKTA', 'RSA', 'GOOGLE', 'SYMANTEC', 'DUO', 'YUBICO' ],
  tags: [ 'UserFactor' ]
}
{
  modelName: 'FactorResultType',
  enum: [
    'SUCCESS',
    'CHALLENGE',
    'WAITING',
    'FAILED',
    'REJECTED',
    'TIMEOUT',
    'TIME_WINDOW_EXCEEDED',
    'PASSCODE_REPLAYED',
    'ERROR',
    'CANCELLED'
  ],
  tags: [ 'UserFactor' ]
}
{
  modelName: 'FactorStatus',
  enum: [
    'PENDING_ACTIVATION',
    'ACTIVE',
    'INACTIVE',
    'NOT_SETUP',
    'ENROLLED',
    'DISABLED',
    'EXPIRED'
  ],
  tags: [ 'UserFactor' ]
}
{
  modelName: 'FactorType',
  enum: [
    'call',
    'email',
    'push',
    'question',
    'sms',
    'token:hardware',
    'token:hotp',
    'token:software:totp',
    'token',
    'u2f',
    'web',
    'webauthn'
  ],
  tags: [ 'UserFactor' ]
}
{
  modelName: 'Feature',
  properties: [
    {
      readOnly: true,
      propertyName: '_links',
      commonType: 'hash',
      isHash: true,
      model: 'object'
    },
    { propertyName: 'description', commonType: 'string' },
    { readOnly: true, propertyName: 'id', commonType: 'string' },
    { propertyName: 'name', commonType: 'string' },
    {
      '$ref': '#/definitions/FeatureStage',
      propertyName: 'stage',
      commonType: 'object',
      isObject: true,
      model: 'FeatureStage'
    },
    {
      '$ref': '#/definitions/EnabledStatus',
      propertyName: 'status',
      commonType: 'enum',
      isEnum: true,
      model: 'EnabledStatus'
    },
    {
      '$ref': '#/definitions/FeatureType',
      propertyName: 'type',
      commonType: 'enum',
      isEnum: true,
      model: 'FeatureType'
    }
  ],
  methods: [
    {
      alias: 'updateLifecycle',
      arguments: [Array],
      operation: [Object]
    },
    { alias: 'getDependents', arguments: [Array], operation: [Object] },
    {
      alias: 'getDependencies',
      arguments: [Array],
      operation: [Object]
    }
  ],
  crud: [ { alias: 'read', arguments: [], operation: [Object] } ],
  tags: [ 'Feature' ]
}
{
  modelName: 'FeatureStage',
  properties: [
    {
      '$ref': '#/definitions/FeatureStageState',
      propertyName: 'state',
      commonType: 'enum',
      isEnum: true,
      model: 'FeatureStageState'
    },
    {
      '$ref': '#/definitions/FeatureStageValue',
      propertyName: 'value',
      commonType: 'enum',
      isEnum: true,
      model: 'FeatureStageValue'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Feature' ]
}
{
  modelName: 'FeatureStageState',
  enum: [ 'OPEN', 'CLOSED' ],
  tags: [ 'Feature' ]
}
{
  modelName: 'FeatureStageValue',
  enum: [ 'EA', 'BETA' ],
  tags: [ 'Feature' ]
}
{
  modelName: 'FeatureType',
  enum: [ 'self-service' ],
  tags: [ 'Feature' ]
}
{
  modelName: 'ForgotPasswordResponse',
  properties: [
    {
      readOnly: true,
      propertyName: 'resetPasswordUrl',
      commonType: 'string'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'User' ]
}
{
  modelName: 'GrantTypePolicyRuleCondition',
  properties: [
    {
      propertyName: 'include',
      commonType: 'array',
      isArray: true,
      model: 'string'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'Group',
  properties: [
    {
      readOnly: true,
      propertyName: '_embedded',
      commonType: 'hash',
      isHash: true,
      model: 'object'
    },
    {
      readOnly: true,
      propertyName: '_links',
      commonType: 'hash',
      isHash: true,
      model: 'object'
    },
    { readOnly: true, propertyName: 'created', commonType: 'dateTime' },
    { readOnly: true, propertyName: 'id', commonType: 'string' },
    {
      readOnly: true,
      propertyName: 'lastMembershipUpdated',
      commonType: 'dateTime'
    },
    {
      readOnly: true,
      propertyName: 'lastUpdated',
      commonType: 'dateTime'
    },
    {
      readOnly: true,
      propertyName: 'objectClass',
      commonType: 'array',
      isArray: true,
      model: 'string'
    },
    {
      '$ref': '#/definitions/GroupProfile',
      propertyName: 'profile',
      commonType: 'object',
      isObject: true,
      model: 'GroupProfile'
    },
    {
      '$ref': '#/definitions/GroupType',
      readOnly: true,
      propertyName: 'type',
      commonType: 'enum',
      isEnum: true,
      model: 'GroupType'
    }
  ],
  methods: [
    { alias: 'removeUser', arguments: [Array], operation: [Object] },
    { alias: 'listUsers', arguments: [Array], operation: [Object] },
    {
      alias: 'listApplications',
      arguments: [Array],
      operation: [Object]
    },
    { alias: 'assignRole', arguments: [Array], operation: [Object] }
  ],
  crud: [
    { alias: 'update', arguments: [Array], operation: [Object] },
    { alias: 'delete', arguments: [Array], operation: [Object] }
  ],
  tags: [ 'Group' ]
}
{
  modelName: 'GroupCondition',
  properties: [
    {
      propertyName: 'exclude',
      commonType: 'array',
      isArray: true,
      model: 'string'
    },
    {
      propertyName: 'include',
      commonType: 'array',
      isArray: true,
      model: 'string'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'GroupPolicyRuleCondition',
  properties: [
    {
      propertyName: 'exclude',
      commonType: 'array',
      isArray: true,
      model: 'string'
    },
    {
      propertyName: 'include',
      commonType: 'array',
      isArray: true,
      model: 'string'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'GroupProfile',
  properties: [
    { propertyName: 'description', commonType: 'string' },
    { propertyName: 'name', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Group' ]
}
{
  modelName: 'GroupRule',
  properties: [
    {
      '$ref': '#/definitions/GroupRuleAction',
      propertyName: 'actions',
      commonType: 'object',
      isObject: true,
      model: 'GroupRuleAction'
    },
    {
      '$ref': '#/definitions/GroupRuleConditions',
      propertyName: 'conditions',
      commonType: 'object',
      isObject: true,
      model: 'GroupRuleConditions'
    },
    { readOnly: true, propertyName: 'created', commonType: 'dateTime' },
    { readOnly: true, propertyName: 'id', commonType: 'string' },
    {
      readOnly: true,
      propertyName: 'lastUpdated',
      commonType: 'dateTime'
    },
    { propertyName: 'name', commonType: 'string' },
    {
      '$ref': '#/definitions/GroupRuleStatus',
      readOnly: true,
      propertyName: 'status',
      commonType: 'enum',
      isEnum: true,
      model: 'GroupRuleStatus'
    },
    { propertyName: 'type', commonType: 'string' }
  ],
  methods: [
    { alias: 'activate', arguments: [Array], operation: [Object] },
    { alias: 'deactivate', arguments: [Array], operation: [Object] }
  ],
  crud: [
    { alias: 'update', arguments: [Array], operation: [Object] },
    { alias: 'delete', arguments: [Array], operation: [Object] }
  ],
  tags: [ 'GroupRule' ]
}
{
  modelName: 'GroupRuleAction',
  properties: [
    {
      '$ref': '#/definitions/GroupRuleGroupAssignment',
      propertyName: 'assignUserToGroups',
      commonType: 'object',
      isObject: true,
      model: 'GroupRuleGroupAssignment'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'GroupRule' ]
}
{
  modelName: 'GroupRuleConditions',
  properties: [
    {
      '$ref': '#/definitions/GroupRuleExpression',
      propertyName: 'expression',
      commonType: 'object',
      isObject: true,
      model: 'GroupRuleExpression'
    },
    {
      '$ref': '#/definitions/GroupRulePeopleCondition',
      propertyName: 'people',
      commonType: 'object',
      isObject: true,
      model: 'GroupRulePeopleCondition'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'GroupRule' ]
}
{
  modelName: 'GroupRuleExpression',
  properties: [
    { propertyName: 'type', commonType: 'string' },
    { propertyName: 'value', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'GroupRule' ]
}
{
  modelName: 'GroupRuleGroupAssignment',
  properties: [
    {
      propertyName: 'groupIds',
      commonType: 'array',
      isArray: true,
      model: 'string'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'GroupRule' ]
}
{
  modelName: 'GroupRuleGroupCondition',
  properties: [
    {
      propertyName: 'exclude',
      commonType: 'array',
      isArray: true,
      model: 'string'
    },
    {
      propertyName: 'include',
      commonType: 'array',
      isArray: true,
      model: 'string'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'GroupRule' ]
}
{
  modelName: 'GroupRulePeopleCondition',
  properties: [
    {
      '$ref': '#/definitions/GroupRuleGroupCondition',
      propertyName: 'groups',
      commonType: 'object',
      isObject: true,
      model: 'GroupRuleGroupCondition'
    },
    {
      '$ref': '#/definitions/GroupRuleUserCondition',
      propertyName: 'users',
      commonType: 'object',
      isObject: true,
      model: 'GroupRuleUserCondition'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'GroupRule' ]
}
{
  modelName: 'GroupRuleStatus',
  enum: [ 'ACTIVE', 'INACTIVE', 'INVALID' ],
  tags: [ 'GroupRule' ]
}
{
  modelName: 'GroupRuleUserCondition',
  properties: [
    {
      propertyName: 'exclude',
      commonType: 'array',
      isArray: true,
      model: 'string'
    },
    {
      propertyName: 'include',
      commonType: 'array',
      isArray: true,
      model: 'string'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'GroupRule' ]
}
{
  modelName: 'GroupType',
  enum: [ 'OKTA_GROUP', 'APP_GROUP', 'BUILT_IN' ],
  tags: [ 'Group' ]
}
{
  modelName: 'HardwareUserFactor',
  properties: [
    {
      '$ref': '#/definitions/HardwareUserFactorProfile',
      propertyName: 'profile',
      commonType: 'object',
      isObject: true,
      model: 'HardwareUserFactorProfile'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'UserFactor' ],
  extends: 'UserFactor'
}
{
  modelName: 'HardwareUserFactorProfile',
  properties: [ { propertyName: 'credentialId', commonType: 'string' } ],
  methods: [],
  crud: [],
  tags: [ 'UserFactor' ]
}
{
  modelName: 'IdentityProvider',
  properties: [
    {
      readOnly: true,
      propertyName: '_links',
      commonType: 'hash',
      isHash: true,
      model: 'object'
    },
    { readOnly: true, propertyName: 'created', commonType: 'dateTime' },
    { readOnly: true, propertyName: 'id', commonType: 'string' },
    { enum: [Array], propertyName: 'issuerMode', commonType: 'string' },
    {
      readOnly: true,
      propertyName: 'lastUpdated',
      commonType: 'dateTime'
    },
    { propertyName: 'name', commonType: 'string' },
    {
      '$ref': '#/definitions/IdentityProviderPolicy',
      propertyName: 'policy',
      commonType: 'object',
      isObject: true,
      model: 'IdentityProviderPolicy'
    },
    {
      '$ref': '#/definitions/Protocol',
      propertyName: 'protocol',
      commonType: 'object',
      isObject: true,
      model: 'Protocol'
    },
    { enum: [Array], propertyName: 'status', commonType: 'string' },
    { enum: [Array], propertyName: 'type', commonType: 'string' }
  ],
  methods: [
    {
      alias: 'listSigningCsrs',
      arguments: [Array],
      operation: [Object]
    },
    { alias: 'generateCsr', arguments: [Array], operation: [Object] },
    {
      alias: 'deleteSigningCsr',
      arguments: [Array],
      operation: [Object]
    },
    { alias: 'getSigningCsr', arguments: [Array], operation: [Object] },
    {
      alias: 'listSigningKeys',
      arguments: [Array],
      operation: [Object]
    },
    {
      alias: 'generateSigningKey',
      arguments: [Array],
      operation: [Object]
    },
    { alias: 'getSigningKey', arguments: [Array], operation: [Object] },
    { alias: 'cloneKey', arguments: [Array], operation: [Object] },
    { alias: 'activate', arguments: [Array], operation: [Object] },
    { alias: 'deactivate', arguments: [Array], operation: [Object] },
    { alias: 'listUsers', arguments: [Array], operation: [Object] },
    { alias: 'unlinkUser', arguments: [Array], operation: [Object] },
    { alias: 'getUser', arguments: [Array], operation: [Object] },
    { alias: 'linkUser', arguments: [Array], operation: [Object] },
    {
      alias: 'listSocialAuthTokens',
      arguments: [Array],
      operation: [Object]
    }
  ],
  crud: [
    { alias: 'create', arguments: [Array], operation: [Object] },
    { alias: 'read', arguments: [], operation: [Object] },
    { alias: 'update', arguments: [Array], operation: [Object] },
    { alias: 'delete', arguments: [Array], operation: [Object] }
  ],
  tags: [ 'IdentityProvider' ]
}
{
  modelName: 'IdentityProviderApplicationUser',
  properties: [
    {
      readOnly: true,
      propertyName: '_embedded',
      commonType: 'hash',
      isHash: true,
      model: 'object'
    },
    {
      readOnly: true,
      propertyName: '_links',
      commonType: 'hash',
      isHash: true,
      model: 'object'
    },
    { propertyName: 'created', commonType: 'string' },
    { propertyName: 'externalId', commonType: 'string' },
    { readOnly: true, propertyName: 'id', commonType: 'string' },
    { propertyName: 'lastUpdated', commonType: 'string' },
    {
      propertyName: 'profile',
      commonType: 'hash',
      isHash: true,
      model: 'object'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'IdentityProvider' ]
}
{
  modelName: 'IdentityProviderCredentials',
  properties: [
    {
      '$ref': '#/definitions/IdentityProviderCredentialsClient',
      propertyName: 'client',
      commonType: 'object',
      isObject: true,
      model: 'IdentityProviderCredentialsClient'
    },
    {
      '$ref': '#/definitions/IdentityProviderCredentialsSigning',
      propertyName: 'signing',
      commonType: 'object',
      isObject: true,
      model: 'IdentityProviderCredentialsSigning'
    },
    {
      '$ref': '#/definitions/IdentityProviderCredentialsTrust',
      propertyName: 'trust',
      commonType: 'object',
      isObject: true,
      model: 'IdentityProviderCredentialsTrust'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'IdentityProvider' ]
}
{
  modelName: 'IdentityProviderCredentialsClient',
  properties: [
    { propertyName: 'client_id', commonType: 'string' },
    { propertyName: 'client_secret', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'IdentityProvider' ]
}
{
  modelName: 'IdentityProviderCredentialsSigning',
  properties: [ { propertyName: 'kid', commonType: 'string' } ],
  methods: [],
  crud: [],
  tags: [ 'IdentityProvider' ]
}
{
  modelName: 'IdentityProviderCredentialsTrust',
  properties: [
    { propertyName: 'audience', commonType: 'string' },
    { propertyName: 'issuer', commonType: 'string' },
    { propertyName: 'kid', commonType: 'string' },
    { enum: [Array], propertyName: 'revocation', commonType: 'string' },
    { propertyName: 'revocationCacheLifetime', commonType: 'integer' }
  ],
  methods: [],
  crud: [],
  tags: [ 'IdentityProvider' ]
}
{
  modelName: 'IdentityProviderPolicy',
  properties: [
    {
      '$ref': '#/definitions/PolicyAccountLink',
      propertyName: 'accountLink',
      commonType: 'object',
      isObject: true,
      model: 'PolicyAccountLink'
    },
    { propertyName: 'maxClockSkew', commonType: 'integer' },
    {
      '$ref': '#/definitions/Provisioning',
      propertyName: 'provisioning',
      commonType: 'object',
      isObject: true,
      model: 'Provisioning'
    },
    {
      '$ref': '#/definitions/PolicySubject',
      propertyName: 'subject',
      commonType: 'object',
      isObject: true,
      model: 'PolicySubject'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ],
  extends: 'Policy'
}
{
  modelName: 'IdentityProviderPolicyRuleCondition',
  properties: [
    {
      propertyName: 'idpIds',
      commonType: 'array',
      isArray: true,
      model: 'string'
    },
    { enum: [Array], propertyName: 'provider', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'InactivityPolicyRuleCondition',
  properties: [
    { propertyName: 'number', commonType: 'integer' },
    { propertyName: 'unit', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'InlineHook',
  properties: [
    {
      readOnly: true,
      propertyName: '_links',
      commonType: 'hash',
      isHash: true,
      model: 'object'
    },
    {
      '$ref': '#/definitions/InlineHookChannel',
      propertyName: 'channel',
      commonType: 'object',
      isObject: true,
      model: 'InlineHookChannel'
    },
    { readOnly: true, propertyName: 'created', commonType: 'dateTime' },
    { readOnly: true, propertyName: 'id', commonType: 'string' },
    {
      readOnly: true,
      propertyName: 'lastUpdated',
      commonType: 'dateTime'
    },
    { propertyName: 'name', commonType: 'string' },
    { enum: [Array], propertyName: 'status', commonType: 'string' },
    { enum: [Array], propertyName: 'type', commonType: 'string' },
    { propertyName: 'version', commonType: 'string' }
  ],
  methods: [
    { alias: 'activate', arguments: [Array], operation: [Object] },
    { alias: 'deactivate', arguments: [Array], operation: [Object] },
    { alias: 'execute', arguments: [Array], operation: [Object] }
  ],
  crud: [
    { alias: 'create', arguments: [Array], operation: [Object] },
    { alias: 'read', arguments: [], operation: [Object] },
    { alias: 'update', arguments: [Array], operation: [Object] },
    { alias: 'delete', arguments: [Array], operation: [Object] }
  ],
  tags: [ 'InlineHook' ]
}
{
  modelName: 'InlineHookChannel',
  properties: [
    {
      '$ref': '#/definitions/InlineHookChannelConfig',
      readOnly: false,
      propertyName: 'config',
      commonType: 'object',
      isObject: true,
      model: 'InlineHookChannelConfig'
    },
    {
      enum: [Array],
      readOnly: false,
      propertyName: 'type',
      commonType: 'string'
    },
    { readOnly: false, propertyName: 'version', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'InlineHook' ]
}
{
  modelName: 'InlineHookChannelConfig',
  properties: [
    {
      '$ref': '#/definitions/InlineHookChannelConfigAuthScheme',
      propertyName: 'authScheme',
      commonType: 'object',
      isObject: true,
      model: 'InlineHookChannelConfigAuthScheme'
    },
    {
      propertyName: 'headers',
      commonType: 'array',
      isArray: true,
      model: 'InlineHookChannelConfigHeaders'
    },
    { propertyName: 'uri', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'InlineHook' ]
}
{
  modelName: 'InlineHookChannelConfigAuthScheme',
  properties: [
    { propertyName: 'key', commonType: 'string' },
    { propertyName: 'type', commonType: 'string' },
    { propertyName: 'value', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'InlineHook' ]
}
{
  modelName: 'InlineHookChannelConfigHeaders',
  properties: [
    { propertyName: 'key', commonType: 'string' },
    { propertyName: 'value', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'InlineHook' ]
}
{
  modelName: 'InlineHookPayload',
  properties: [],
  methods: [],
  crud: [],
  tags: [ 'InlineHook' ]
}
{
  modelName: 'InlineHookResponse',
  properties: [
    {
      propertyName: 'commands',
      commonType: 'array',
      isArray: true,
      model: 'InlineHookResponseCommands'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'InlineHook' ]
}
{
  modelName: 'InlineHookResponseCommandValue',
  properties: [
    { propertyName: 'op', commonType: 'string' },
    { propertyName: 'path', commonType: 'string' },
    { propertyName: 'value', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'InlineHook' ]
}
{
  modelName: 'InlineHookResponseCommands',
  properties: [
    { propertyName: 'type', commonType: 'string' },
    {
      propertyName: 'value',
      commonType: 'array',
      isArray: true,
      model: 'InlineHookResponseCommandValue'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'InlineHook' ]
}
{
  modelName: 'IonField',
  properties: [
    {
      '$ref': '#/definitions/IonForm',
      propertyName: 'form',
      commonType: 'object',
      isObject: true,
      model: 'IonForm'
    },
    { propertyName: 'label', commonType: 'string' },
    { propertyName: 'mutable', commonType: 'boolean' },
    { propertyName: 'name', commonType: 'string' },
    { propertyName: 'required', commonType: 'boolean' },
    { propertyName: 'secret', commonType: 'boolean' },
    { propertyName: 'type', commonType: 'string' },
    {
      propertyName: 'value',
      commonType: 'hash',
      isHash: true,
      model: 'object'
    },
    { propertyName: 'visible', commonType: 'boolean' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Ion' ]
}
{
  modelName: 'IonForm',
  properties: [
    { propertyName: 'accepts', commonType: 'string' },
    { propertyName: 'href', commonType: 'string' },
    { propertyName: 'method', commonType: 'string' },
    { propertyName: 'name', commonType: 'string' },
    { propertyName: 'produces', commonType: 'string' },
    { propertyName: 'refresh', commonType: 'integer' },
    {
      propertyName: 'rel',
      commonType: 'array',
      isArray: true,
      model: 'string'
    },
    {
      propertyName: 'relatesTo',
      commonType: 'array',
      isArray: true,
      model: 'string'
    },
    {
      readOnly: true,
      propertyName: 'value',
      commonType: 'array',
      isArray: true,
      model: 'IonField'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Ion' ]
}
{
  modelName: 'JsonWebKey',
  properties: [
    {
      readOnly: true,
      propertyName: '_links',
      commonType: 'hash',
      isHash: true,
      model: 'object'
    },
    { readOnly: true, propertyName: 'alg', commonType: 'string' },
    { readOnly: true, propertyName: 'created', commonType: 'dateTime' },
    { readOnly: true, propertyName: 'e', commonType: 'string' },
    {
      readOnly: true,
      propertyName: 'expiresAt',
      commonType: 'dateTime'
    },
    {
      readOnly: true,
      propertyName: 'key_ops',
      commonType: 'array',
      isArray: true,
      model: 'string'
    },
    { readOnly: true, propertyName: 'kid', commonType: 'string' },
    { readOnly: true, propertyName: 'kty', commonType: 'string' },
    {
      readOnly: true,
      propertyName: 'lastUpdated',
      commonType: 'dateTime'
    },
    { readOnly: true, propertyName: 'n', commonType: 'string' },
    { readOnly: true, propertyName: 'status', commonType: 'string' },
    { readOnly: true, propertyName: 'use', commonType: 'string' },
    {
      readOnly: false,
      propertyName: 'x5c',
      commonType: 'array',
      isArray: true,
      model: 'string'
    },
    { readOnly: true, propertyName: 'x5t', commonType: 'string' },
    { readOnly: true, propertyName: 'x5t#S256', commonType: 'string' },
    { readOnly: true, propertyName: 'x5u', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ]
}
{
  modelName: 'JwkUse',
  properties: [ { enum: [Array], propertyName: 'use', commonType: 'string' } ],
  methods: [],
  crud: [],
  tags: [ 'Application' ]
}
{
  modelName: 'LifecycleExpirationPolicyRuleCondition',
  properties: [
    { propertyName: 'lifecycleStatus', commonType: 'string' },
    { propertyName: 'number', commonType: 'integer' },
    { propertyName: 'unit', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'LinkedObject',
  properties: [
    {
      readOnly: true,
      propertyName: '_links',
      commonType: 'hash',
      isHash: true,
      model: 'object'
    },
    {
      '$ref': '#/definitions/LinkedObjectDetails',
      propertyName: 'associated',
      commonType: 'object',
      isObject: true,
      model: 'LinkedObjectDetails'
    },
    {
      '$ref': '#/definitions/LinkedObjectDetails',
      propertyName: 'primary',
      commonType: 'object',
      isObject: true,
      model: 'LinkedObjectDetails'
    }
  ],
  methods: [],
  crud: [
    { alias: 'create', arguments: [Array], operation: [Object] },
    { alias: 'read', arguments: [], operation: [Object] },
    { alias: 'delete', arguments: [Array], operation: [Object] }
  ],
  tags: [ 'LinkedObject' ]
}
{
  modelName: 'LinkedObjectDetails',
  properties: [
    { propertyName: 'description', commonType: 'string' },
    { propertyName: 'name', commonType: 'string' },
    { propertyName: 'title', commonType: 'string' },
    {
      '$ref': '#/definitions/LinkedObjectDetailsType',
      propertyName: 'type',
      commonType: 'enum',
      isEnum: true,
      model: 'LinkedObjectDetailsType'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'LinkedObject' ]
}
{
  modelName: 'LinkedObjectDetailsType',
  enum: [ 'USER' ],
  tags: [ 'LinkedObject' ]
}
{
  modelName: 'LogActor',
  properties: [
    {
      readOnly: true,
      propertyName: 'alternateId',
      commonType: 'string'
    },
    {
      readOnly: true,
      propertyName: 'detail',
      commonType: 'hash',
      isHash: true,
      model: 'object'
    },
    {
      readOnly: true,
      propertyName: 'displayName',
      commonType: 'string'
    },
    { readOnly: true, propertyName: 'id', commonType: 'string' },
    { readOnly: true, propertyName: 'type', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Log' ]
}
{
  modelName: 'LogAuthenticationContext',
  properties: [
    {
      '$ref': '#/definitions/LogAuthenticationProvider',
      readOnly: true,
      propertyName: 'authenticationProvider',
      commonType: 'enum',
      isEnum: true,
      model: 'LogAuthenticationProvider'
    },
    {
      readOnly: true,
      propertyName: 'authenticationStep',
      commonType: 'integer'
    },
    {
      '$ref': '#/definitions/LogCredentialProvider',
      propertyName: 'credentialProvider',
      commonType: 'enum',
      isEnum: true,
      model: 'LogCredentialProvider'
    },
    {
      '$ref': '#/definitions/LogCredentialType',
      propertyName: 'credentialType',
      commonType: 'enum',
      isEnum: true,
      model: 'LogCredentialType'
    },
    {
      readOnly: true,
      propertyName: 'externalSessionId',
      commonType: 'string'
    },
    { readOnly: true, propertyName: 'interface', commonType: 'string' },
    {
      '$ref': '#/definitions/LogIssuer',
      readOnly: true,
      propertyName: 'issuer',
      commonType: 'object',
      isObject: true,
      model: 'LogIssuer'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Log' ]
}
{
  modelName: 'LogAuthenticationProvider',
  enum: [
    'OKTA_AUTHENTICATION_PROVIDER',
    'ACTIVE_DIRECTORY',
    'LDAP',
    'FEDERATION',
    'SOCIAL',
    'FACTOR_PROVIDER'
  ],
  tags: [ 'Log' ]
}
{
  modelName: 'LogClient',
  properties: [
    { readOnly: true, propertyName: 'device', commonType: 'string' },
    {
      '$ref': '#/definitions/LogGeographicalContext',
      readOnly: true,
      propertyName: 'geographicalContext',
      commonType: 'object',
      isObject: true,
      model: 'LogGeographicalContext'
    },
    { readOnly: true, propertyName: 'id', commonType: 'string' },
    { readOnly: true, propertyName: 'ipAddress', commonType: 'string' },
    {
      '$ref': '#/definitions/LogUserAgent',
      readOnly: true,
      propertyName: 'userAgent',
      commonType: 'object',
      isObject: true,
      model: 'LogUserAgent'
    },
    { readOnly: true, propertyName: 'zone', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Log' ]
}
{
  modelName: 'LogCredentialProvider',
  enum: [
    'OKTA_AUTHENTICATION_PROVIDER',
    'RSA',
    'SYMANTEC',
    'GOOGLE',
    'DUO',
    'YUBIKEY'
  ],
  tags: [ 'Log' ]
}
{
  modelName: 'LogCredentialType',
  enum: [
    'OTP',      'SMS',
    'PASSWORD', 'ASSERTION',
    'IWA',      'EMAIL',
    'OAUTH2',   'JWT'
  ],
  tags: [ 'Log' ]
}
{
  modelName: 'LogDebugContext',
  properties: [
    {
      readOnly: true,
      propertyName: 'debugData',
      commonType: 'hash',
      isHash: true,
      model: 'object'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Log' ]
}
{
  modelName: 'LogEvent',
  properties: [
    {
      '$ref': '#/definitions/LogActor',
      readOnly: true,
      propertyName: 'actor',
      commonType: 'object',
      isObject: true,
      model: 'LogActor'
    },
    {
      '$ref': '#/definitions/LogAuthenticationContext',
      readOnly: true,
      propertyName: 'authenticationContext',
      commonType: 'object',
      isObject: true,
      model: 'LogAuthenticationContext'
    },
    {
      '$ref': '#/definitions/LogClient',
      readOnly: true,
      propertyName: 'client',
      commonType: 'object',
      isObject: true,
      model: 'LogClient'
    },
    {
      '$ref': '#/definitions/LogDebugContext',
      readOnly: true,
      propertyName: 'debugContext',
      commonType: 'object',
      isObject: true,
      model: 'LogDebugContext'
    },
    {
      readOnly: true,
      propertyName: 'displayMessage',
      commonType: 'string'
    },
    { readOnly: true, propertyName: 'eventType', commonType: 'string' },
    {
      readOnly: true,
      propertyName: 'legacyEventType',
      commonType: 'string'
    },
    {
      '$ref': '#/definitions/LogOutcome',
      readOnly: true,
      propertyName: 'outcome',
      commonType: 'object',
      isObject: true,
      model: 'LogOutcome'
    },
    {
      readOnly: true,
      propertyName: 'published',
      commonType: 'dateTime'
    },
    {
      '$ref': '#/definitions/LogRequest',
      readOnly: true,
      propertyName: 'request',
      commonType: 'object',
      isObject: true,
      model: 'LogRequest'
    },
    {
      '$ref': '#/definitions/LogSecurityContext',
      readOnly: true,
      propertyName: 'securityContext',
      commonType: 'object',
      isObject: true,
      model: 'LogSecurityContext'
    },
    {
      '$ref': '#/definitions/LogSeverity',
      readOnly: true,
      propertyName: 'severity',
      commonType: 'enum',
      isEnum: true,
      model: 'LogSeverity'
    },
    {
      readOnly: true,
      propertyName: 'target',
      commonType: 'array',
      isArray: true,
      model: 'LogTarget'
    },
    {
      '$ref': '#/definitions/LogTransaction',
      readOnly: true,
      propertyName: 'transaction',
      commonType: 'object',
      isObject: true,
      model: 'LogTransaction'
    },
    { readOnly: true, propertyName: 'uuid', commonType: 'string' },
    { readOnly: true, propertyName: 'version', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Log' ]
}
{
  modelName: 'LogGeographicalContext',
  properties: [
    { readOnly: true, propertyName: 'city', commonType: 'string' },
    { readOnly: true, propertyName: 'country', commonType: 'string' },
    {
      '$ref': '#/definitions/LogGeolocation',
      readOnly: true,
      propertyName: 'geolocation',
      commonType: 'object',
      isObject: true,
      model: 'LogGeolocation'
    },
    {
      readOnly: true,
      propertyName: 'postalCode',
      commonType: 'string'
    },
    { readOnly: true, propertyName: 'state', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Log' ]
}
{
  modelName: 'LogGeolocation',
  properties: [
    { readOnly: true, propertyName: 'lat', commonType: 'double' },
    { readOnly: true, propertyName: 'lon', commonType: 'double' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Log' ]
}
{
  modelName: 'LogIpAddress',
  properties: [
    {
      '$ref': '#/definitions/LogGeographicalContext',
      readOnly: true,
      propertyName: 'geographicalContext',
      commonType: 'object',
      isObject: true,
      model: 'LogGeographicalContext'
    },
    { readOnly: true, propertyName: 'ip', commonType: 'string' },
    { readOnly: true, propertyName: 'source', commonType: 'string' },
    { readOnly: true, propertyName: 'version', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Log' ]
}
{
  modelName: 'LogIssuer',
  properties: [
    { readOnly: true, propertyName: 'id', commonType: 'string' },
    { readOnly: true, propertyName: 'type', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Log' ]
}
{
  modelName: 'LogOutcome',
  properties: [
    { readOnly: true, propertyName: 'reason', commonType: 'string' },
    { readOnly: true, propertyName: 'result', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Log' ]
}
{
  modelName: 'LogRequest',
  properties: [
    {
      readOnly: true,
      propertyName: 'ipChain',
      commonType: 'array',
      isArray: true,
      model: 'LogIpAddress'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Log' ]
}
{
  modelName: 'LogSecurityContext',
  properties: [
    { readOnly: true, propertyName: 'asNumber', commonType: 'integer' },
    { readOnly: true, propertyName: 'asOrg', commonType: 'string' },
    { readOnly: true, propertyName: 'domain', commonType: 'string' },
    { readOnly: true, propertyName: 'isProxy', commonType: 'boolean' },
    { readOnly: true, propertyName: 'isp', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Log' ]
}
{
  modelName: 'LogSeverity',
  enum: [ 'DEBUG', 'INFO', 'WARN', 'ERROR' ],
  tags: [ 'Log' ]
}
{
  modelName: 'LogTarget',
  properties: [
    {
      readOnly: true,
      propertyName: 'alternateId',
      commonType: 'string'
    },
    {
      readOnly: true,
      propertyName: 'detailEntry',
      commonType: 'hash',
      isHash: true,
      model: 'object'
    },
    {
      readOnly: true,
      propertyName: 'displayName',
      commonType: 'string'
    },
    { readOnly: true, propertyName: 'id', commonType: 'string' },
    { readOnly: true, propertyName: 'type', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Log' ]
}
{
  modelName: 'LogTransaction',
  properties: [
    {
      readOnly: true,
      propertyName: 'detail',
      commonType: 'hash',
      isHash: true,
      model: 'object'
    },
    { readOnly: true, propertyName: 'id', commonType: 'string' },
    { readOnly: true, propertyName: 'type', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Log' ]
}
{
  modelName: 'LogUserAgent',
  properties: [
    { readOnly: true, propertyName: 'browser', commonType: 'string' },
    { readOnly: true, propertyName: 'os', commonType: 'string' },
    {
      readOnly: true,
      propertyName: 'rawUserAgent',
      commonType: 'string'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Log' ]
}
{
  modelName: 'MDMEnrollmentPolicyRuleCondition',
  properties: [
    { propertyName: 'blockNonSafeAndroid', commonType: 'boolean' },
    { enum: [Array], propertyName: 'enrollment', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'OAuth2Actor',
  properties: [
    { readOnly: true, propertyName: 'id', commonType: 'string' },
    { propertyName: 'type', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ]
}
{
  modelName: 'OAuth2Claim',
  properties: [
    {
      readOnly: true,
      propertyName: '_links',
      commonType: 'hash',
      isHash: true,
      model: 'object'
    },
    { propertyName: 'alwaysIncludeInToken', commonType: 'boolean' },
    { enum: [Array], propertyName: 'claimType', commonType: 'string' },
    {
      '$ref': '#/definitions/OAuth2ClaimConditions',
      propertyName: 'conditions',
      commonType: 'object',
      isObject: true,
      model: 'OAuth2ClaimConditions'
    },
    {
      enum: [Array],
      propertyName: 'group_filter_type',
      commonType: 'string'
    },
    { readOnly: true, propertyName: 'id', commonType: 'string' },
    { propertyName: 'name', commonType: 'string' },
    { enum: [Array], propertyName: 'status', commonType: 'string' },
    { propertyName: 'system', commonType: 'boolean' },
    { propertyName: 'value', commonType: 'string' },
    { enum: [Array], propertyName: 'valueType', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ]
}
{
  modelName: 'OAuth2ClaimConditions',
  properties: [
    {
      propertyName: 'scopes',
      commonType: 'array',
      isArray: true,
      model: 'string'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ]
}
{
  modelName: 'OAuth2Client',
  properties: [
    {
      readOnly: true,
      propertyName: '_links',
      commonType: 'hash',
      isHash: true,
      model: 'object'
    },
    { readOnly: true, propertyName: 'client_id', commonType: 'string' },
    {
      readOnly: true,
      propertyName: 'client_name',
      commonType: 'string'
    },
    {
      readOnly: true,
      propertyName: 'client_uri',
      commonType: 'string'
    },
    { readOnly: true, propertyName: 'logo_uri', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ]
}
{
  modelName: 'OAuth2RefreshToken',
  properties: [
    {
      readOnly: true,
      propertyName: '_embedded',
      commonType: 'hash',
      isHash: true,
      model: 'object'
    },
    {
      readOnly: true,
      propertyName: '_links',
      commonType: 'hash',
      isHash: true,
      model: 'object'
    },
    { propertyName: 'clientId', commonType: 'string' },
    { readOnly: true, propertyName: 'created', commonType: 'dateTime' },
    {
      '$ref': '#/definitions/OAuth2Actor',
      propertyName: 'createdBy',
      commonType: 'object',
      isObject: true,
      model: 'OAuth2Actor'
    },
    {
      readOnly: true,
      propertyName: 'expiresAt',
      commonType: 'dateTime'
    },
    { readOnly: true, propertyName: 'id', commonType: 'string' },
    { propertyName: 'issuer', commonType: 'string' },
    {
      readOnly: true,
      propertyName: 'lastUpdated',
      commonType: 'dateTime'
    },
    {
      propertyName: 'scopes',
      commonType: 'array',
      isArray: true,
      model: 'string'
    },
    { enum: [Array], propertyName: 'status', commonType: 'string' },
    { propertyName: 'userId', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ]
}
{
  modelName: 'OAuth2Scope',
  properties: [
    { enum: [Array], propertyName: 'consent', commonType: 'string' },
    { propertyName: 'default', commonType: 'boolean' },
    { propertyName: 'description', commonType: 'string' },
    { propertyName: 'displayName', commonType: 'string' },
    { readOnly: true, propertyName: 'id', commonType: 'string' },
    {
      enum: [Array],
      propertyName: 'metadataPublish',
      commonType: 'string'
    },
    { propertyName: 'name', commonType: 'string' },
    { propertyName: 'system', commonType: 'boolean' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ]
}
{
  modelName: 'OAuth2ScopeConsentGrant',
  properties: [
    {
      readOnly: true,
      propertyName: '_embedded',
      commonType: 'hash',
      isHash: true,
      model: 'object'
    },
    {
      readOnly: true,
      propertyName: '_links',
      commonType: 'hash',
      isHash: true,
      model: 'object'
    },
    { propertyName: 'clientId', commonType: 'string' },
    { readOnly: true, propertyName: 'created', commonType: 'dateTime' },
    {
      '$ref': '#/definitions/OAuth2Actor',
      propertyName: 'createdBy',
      commonType: 'object',
      isObject: true,
      model: 'OAuth2Actor'
    },
    { readOnly: true, propertyName: 'id', commonType: 'string' },
    { propertyName: 'issuer', commonType: 'string' },
    {
      readOnly: true,
      propertyName: 'lastUpdated',
      commonType: 'dateTime'
    },
    { propertyName: 'scopeId', commonType: 'string' },
    {
      '$ref': '#/definitions/OAuth2ScopeConsentGrantSource',
      propertyName: 'source',
      commonType: 'enum',
      isEnum: true,
      model: 'OAuth2ScopeConsentGrantSource'
    },
    {
      '$ref': '#/definitions/OAuth2ScopeConsentGrantStatus',
      propertyName: 'status',
      commonType: 'enum',
      isEnum: true,
      model: 'OAuth2ScopeConsentGrantStatus'
    },
    { propertyName: 'userId', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ]
}
{
  modelName: 'OAuth2ScopeConsentGrantSource',
  enum: [ 'END_USER', 'ADMIN' ],
  tags: [ 'Application' ]
}
{
  modelName: 'OAuth2ScopeConsentGrantStatus',
  enum: [ 'ACTIVE', 'REVOKED' ],
  tags: [ 'Application' ]
}
{
  modelName: 'OAuth2ScopesMediationPolicyRuleCondition',
  properties: [
    {
      propertyName: 'include',
      commonType: 'array',
      isArray: true,
      model: 'string'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ]
}
{
  modelName: 'OAuth2Token',
  properties: [
    {
      readOnly: true,
      propertyName: '_embedded',
      commonType: 'hash',
      isHash: true,
      model: 'object'
    },
    {
      readOnly: true,
      propertyName: '_links',
      commonType: 'hash',
      isHash: true,
      model: 'object'
    },
    { propertyName: 'clientId', commonType: 'string' },
    { readOnly: true, propertyName: 'created', commonType: 'dateTime' },
    {
      readOnly: true,
      propertyName: 'expiresAt',
      commonType: 'dateTime'
    },
    { readOnly: true, propertyName: 'id', commonType: 'string' },
    { propertyName: 'issuer', commonType: 'string' },
    {
      readOnly: true,
      propertyName: 'lastUpdated',
      commonType: 'dateTime'
    },
    {
      propertyName: 'scopes',
      commonType: 'array',
      isArray: true,
      model: 'string'
    },
    { enum: [Array], propertyName: 'status', commonType: 'string' },
    { propertyName: 'userId', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ]
}
{
  modelName: 'OAuthApplicationCredentials',
  properties: [
    {
      '$ref': '#/definitions/ApplicationCredentialsOAuthClient',
      propertyName: 'oauthClient',
      commonType: 'object',
      isObject: true,
      model: 'ApplicationCredentialsOAuthClient'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ],
  extends: 'ApplicationCredentials'
}
{
  modelName: 'OAuthAuthorizationPolicy',
  properties: [],
  methods: [],
  crud: [],
  tags: [ 'Policy' ],
  extends: 'Policy'
}
{
  modelName: 'OAuthEndpointAuthenticationMethod',
  enum: [
    'none',
    'client_secret_post',
    'client_secret_basic',
    'client_secret_jwt'
  ],
  tags: [ 'Application' ]
}
{
  modelName: 'OAuthGrantType',
  enum: [
    'authorization_code',
    'implicit',
    'password',
    'refresh_token',
    'client_credentials'
  ],
  tags: [ 'Application' ]
}
{
  modelName: 'OAuthResponseType',
  enum: [ 'code', 'token', 'id_token' ],
  tags: [ 'Application' ]
}
{
  modelName: 'OktaSignOnPolicy',
  properties: [
    {
      '$ref': '#/definitions/OktaSignOnPolicyConditions',
      propertyName: 'conditions',
      commonType: 'object',
      isObject: true,
      model: 'OktaSignOnPolicyConditions'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ],
  extends: 'Policy'
}
{
  modelName: 'OktaSignOnPolicyConditions',
  properties: [
    {
      '$ref': '#/definitions/PolicyPeopleCondition',
      propertyName: 'people',
      commonType: 'object',
      isObject: true,
      model: 'PolicyPeopleCondition'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'OktaSignOnPolicyRule',
  properties: [
    {
      '$ref': '#/definitions/OktaSignOnPolicyRuleActions',
      propertyName: 'actions',
      commonType: 'object',
      isObject: true,
      model: 'OktaSignOnPolicyRuleActions'
    },
    {
      '$ref': '#/definitions/OktaSignOnPolicyRuleConditions',
      propertyName: 'conditions',
      commonType: 'object',
      isObject: true,
      model: 'OktaSignOnPolicyRuleConditions'
    },
    { propertyName: 'name', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ],
  extends: 'PolicyRule'
}
{
  modelName: 'OktaSignOnPolicyRuleActions',
  properties: [
    {
      '$ref': '#/definitions/OktaSignOnPolicyRuleSignonActions',
      propertyName: 'signon',
      commonType: 'object',
      isObject: true,
      model: 'OktaSignOnPolicyRuleSignonActions'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'OktaSignOnPolicyRuleConditions',
  properties: [
    {
      '$ref': '#/definitions/PolicyRuleAuthContextCondition',
      propertyName: 'authContext',
      commonType: 'object',
      isObject: true,
      model: 'PolicyRuleAuthContextCondition'
    },
    {
      '$ref': '#/definitions/PolicyNetworkCondition',
      propertyName: 'network',
      commonType: 'object',
      isObject: true,
      model: 'PolicyNetworkCondition'
    },
    {
      '$ref': '#/definitions/PolicyPeopleCondition',
      propertyName: 'people',
      commonType: 'object',
      isObject: true,
      model: 'PolicyPeopleCondition'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'OktaSignOnPolicyRuleSignonActions',
  properties: [
    { enum: [Array], propertyName: 'access', commonType: 'string' },
    { propertyName: 'factorLifetime', commonType: 'integer' },
    {
      enum: [Array],
      propertyName: 'factorPromptMode',
      commonType: 'string'
    },
    {
      default: false,
      propertyName: 'rememberDeviceByDefault',
      commonType: 'boolean'
    },
    {
      default: false,
      propertyName: 'requireFactor',
      commonType: 'boolean'
    },
    {
      '$ref': '#/definitions/OktaSignOnPolicyRuleSignonSessionActions',
      propertyName: 'session',
      commonType: 'object',
      isObject: true,
      model: 'OktaSignOnPolicyRuleSignonSessionActions'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'OktaSignOnPolicyRuleSignonSessionActions',
  properties: [
    {
      default: 120,
      propertyName: 'maxSessionIdleMinutes',
      commonType: 'integer'
    },
    {
      default: 0,
      propertyName: 'maxSessionLifetimeMinutes',
      commonType: 'integer'
    },
    {
      default: false,
      propertyName: 'usePersistentCookie',
      commonType: 'boolean'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'OpenIdConnectApplication',
  properties: [
    {
      '$ref': '#/definitions/OAuthApplicationCredentials',
      propertyName: 'credentials',
      commonType: 'object',
      isObject: true,
      model: 'OAuthApplicationCredentials'
    },
    {
      default: 'oidc_client',
      propertyName: 'name',
      commonType: 'object',
      isObject: true,
      model: undefined
    },
    {
      '$ref': '#/definitions/OpenIdConnectApplicationSettings',
      propertyName: 'settings',
      commonType: 'object',
      isObject: true,
      model: 'OpenIdConnectApplicationSettings'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ],
  extends: 'Application'
}
{
  modelName: 'OpenIdConnectApplicationConsentMethod',
  enum: [ 'REQUIRED', 'TRUSTED' ],
  tags: [ 'Application' ]
}
{
  modelName: 'OpenIdConnectApplicationIssuerMode',
  enum: [ 'CUSTOM_URL', 'ORG_URL' ],
  tags: [ 'Application' ]
}
{
  modelName: 'OpenIdConnectApplicationSettings',
  properties: [
    {
      '$ref': '#/definitions/OpenIdConnectApplicationSettingsClient',
      propertyName: 'oauthClient',
      commonType: 'object',
      isObject: true,
      model: 'OpenIdConnectApplicationSettingsClient'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ],
  extends: 'ApplicationSettings'
}
{
  modelName: 'OpenIdConnectApplicationSettingsClient',
  properties: [
    {
      '$ref': '#/definitions/OpenIdConnectApplicationType',
      propertyName: 'application_type',
      commonType: 'enum',
      isEnum: true,
      model: 'OpenIdConnectApplicationType'
    },
    { propertyName: 'client_uri', commonType: 'string' },
    {
      '$ref': '#/definitions/OpenIdConnectApplicationConsentMethod',
      propertyName: 'consent_method',
      commonType: 'enum',
      isEnum: true,
      model: 'OpenIdConnectApplicationConsentMethod'
    },
    {
      propertyName: 'grant_types',
      commonType: 'array',
      isArray: true,
      model: 'OAuthGrantType'
    },
    { propertyName: 'initiate_login_uri', commonType: 'string' },
    {
      '$ref': '#/definitions/OpenIdConnectApplicationIssuerMode',
      propertyName: 'issuer_mode',
      commonType: 'enum',
      isEnum: true,
      model: 'OpenIdConnectApplicationIssuerMode'
    },
    { propertyName: 'logo_uri', commonType: 'string' },
    { propertyName: 'policy_uri', commonType: 'string' },
    {
      propertyName: 'post_logout_redirect_uris',
      commonType: 'array',
      isArray: true,
      model: 'string'
    },
    {
      propertyName: 'redirect_uris',
      commonType: 'array',
      isArray: true,
      model: 'string'
    },
    {
      propertyName: 'response_types',
      commonType: 'array',
      isArray: true,
      model: 'OAuthResponseType'
    },
    { propertyName: 'tos_uri', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ]
}
{
  modelName: 'OpenIdConnectApplicationType',
  enum: [ 'web', 'native', 'browser', 'service' ],
  tags: [ 'Application' ]
}
{
  modelName: 'PasswordCredential',
  properties: [
    {
      '$ref': '#/definitions/PasswordCredentialHash',
      propertyName: 'hash',
      commonType: 'object',
      isObject: true,
      model: 'PasswordCredentialHash'
    },
    {
      '$ref': '#/definitions/PasswordCredentialHook',
      propertyName: 'hook',
      commonType: 'object',
      isObject: true,
      model: 'PasswordCredentialHook'
    },
    { propertyName: 'value', commonType: 'password' }
  ],
  methods: [],
  crud: [],
  tags: [ 'User' ]
}
{
  modelName: 'PasswordCredentialHash',
  properties: [
    {
      '$ref': '#/definitions/PasswordCredentialHashAlgorithm',
      propertyName: 'algorithm',
      commonType: 'enum',
      isEnum: true,
      model: 'PasswordCredentialHashAlgorithm'
    },
    { propertyName: 'salt', commonType: 'string' },
    { propertyName: 'saltOrder', commonType: 'string' },
    { propertyName: 'value', commonType: 'string' },
    { propertyName: 'workerFactor', commonType: 'integer' }
  ],
  methods: [],
  crud: [],
  tags: [ 'User' ]
}
{
  modelName: 'PasswordCredentialHashAlgorithm',
  enum: [ 'BCRYPT', 'SHA-512', 'SHA-256', 'SHA-1', 'MD5' ],
  tags: [ 'User' ]
}
{
  modelName: 'PasswordCredentialHook',
  properties: [ { propertyName: 'type', commonType: 'string' } ],
  methods: [],
  crud: [],
  tags: [ 'User' ]
}
{
  modelName: 'PasswordDictionary',
  properties: [
    {
      '$ref': '#/definitions/PasswordDictionaryCommon',
      propertyName: 'common',
      commonType: 'object',
      isObject: true,
      model: 'PasswordDictionaryCommon'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'PasswordDictionaryCommon',
  properties: [
    { default: false, propertyName: 'exclude', commonType: 'boolean' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'PasswordExpirationPolicyRuleCondition',
  properties: [
    { propertyName: 'number', commonType: 'integer' },
    { propertyName: 'unit', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'PasswordPolicy',
  properties: [
    {
      '$ref': '#/definitions/PasswordPolicyConditions',
      propertyName: 'conditions',
      commonType: 'object',
      isObject: true,
      model: 'PasswordPolicyConditions'
    },
    {
      '$ref': '#/definitions/PasswordPolicySettings',
      propertyName: 'settings',
      commonType: 'object',
      isObject: true,
      model: 'PasswordPolicySettings'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ],
  extends: 'Policy'
}
{
  modelName: 'PasswordPolicyAuthenticationProviderCondition',
  properties: [
    {
      propertyName: 'include',
      commonType: 'array',
      isArray: true,
      model: 'string'
    },
    { enum: [Array], propertyName: 'provider', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'PasswordPolicyConditions',
  properties: [
    {
      '$ref': '#/definitions/PasswordPolicyAuthenticationProviderCondition',
      propertyName: 'authProvider',
      commonType: 'object',
      isObject: true,
      model: 'PasswordPolicyAuthenticationProviderCondition'
    },
    {
      '$ref': '#/definitions/PolicyPeopleCondition',
      propertyName: 'people',
      commonType: 'object',
      isObject: true,
      model: 'PolicyPeopleCondition'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'PasswordPolicyDelegationSettings',
  properties: [
    {
      '$ref': '#/definitions/PasswordPolicyDelegationSettingsOptions',
      propertyName: 'options',
      commonType: 'object',
      isObject: true,
      model: 'PasswordPolicyDelegationSettingsOptions'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'PasswordPolicyDelegationSettingsOptions',
  properties: [ { propertyName: 'skipUnlock', commonType: 'boolean' } ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'PasswordPolicyPasswordSettings',
  properties: [
    {
      '$ref': '#/definitions/PasswordPolicyPasswordSettingsAge',
      propertyName: 'age',
      commonType: 'object',
      isObject: true,
      model: 'PasswordPolicyPasswordSettingsAge'
    },
    {
      '$ref': '#/definitions/PasswordPolicyPasswordSettingsComplexity',
      propertyName: 'complexity',
      commonType: 'object',
      isObject: true,
      model: 'PasswordPolicyPasswordSettingsComplexity'
    },
    {
      '$ref': '#/definitions/PasswordPolicyPasswordSettingsLockout',
      propertyName: 'lockout',
      commonType: 'object',
      isObject: true,
      model: 'PasswordPolicyPasswordSettingsLockout'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'PasswordPolicyPasswordSettingsAge',
  properties: [
    {
      default: 0,
      propertyName: 'expireWarnDays',
      commonType: 'integer'
    },
    { default: 0, propertyName: 'historyCount', commonType: 'integer' },
    { default: 0, propertyName: 'maxAgeDays', commonType: 'integer' },
    {
      default: 0,
      propertyName: 'minAgeMinutes',
      commonType: 'integer'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'PasswordPolicyPasswordSettingsComplexity',
  properties: [
    {
      '$ref': '#/definitions/PasswordDictionary',
      propertyName: 'dictionary',
      commonType: 'object',
      isObject: true,
      model: 'PasswordDictionary'
    },
    {
      default: 1,
      propertyName: 'excludeAttributes',
      commonType: 'array',
      isArray: true,
      model: 'string'
    },
    {
      default: true,
      propertyName: 'excludeUsername',
      commonType: 'boolean'
    },
    { default: 8, propertyName: 'minLength', commonType: 'integer' },
    { default: 1, propertyName: 'minLowerCase', commonType: 'integer' },
    { default: 1, propertyName: 'minNumber', commonType: 'integer' },
    { default: 1, propertyName: 'minSymbol', commonType: 'integer' },
    { default: 1, propertyName: 'minUpperCase', commonType: 'integer' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'PasswordPolicyPasswordSettingsLockout',
  properties: [
    { propertyName: 'autoUnlockMinutes', commonType: 'integer' },
    { propertyName: 'maxAttempts', commonType: 'integer' },
    { propertyName: 'showLockoutFailures', commonType: 'boolean' },
    {
      propertyName: 'userLockoutNotificationChannels',
      commonType: 'array',
      isArray: true,
      model: 'string'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'PasswordPolicyRecoveryEmail',
  properties: [
    {
      '$ref': '#/definitions/PasswordPolicyRecoveryEmailProperties',
      propertyName: 'properties',
      commonType: 'object',
      isObject: true,
      model: 'PasswordPolicyRecoveryEmailProperties'
    },
    {
      enum: [Array],
      readOnly: true,
      propertyName: 'status',
      commonType: 'string'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'PasswordPolicyRecoveryEmailProperties',
  properties: [
    {
      '$ref': '#/definitions/PasswordPolicyRecoveryEmailRecoveryToken',
      propertyName: 'recoveryToken',
      commonType: 'object',
      isObject: true,
      model: 'PasswordPolicyRecoveryEmailRecoveryToken'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'PasswordPolicyRecoveryEmailRecoveryToken',
  properties: [
    {
      default: 10080,
      propertyName: 'tokenLifetimeMinutes',
      commonType: 'integer'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'PasswordPolicyRecoveryFactorSettings',
  properties: [
    {
      default: 'INACTIVE',
      enum: [Array],
      propertyName: 'status',
      commonType: 'string'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'PasswordPolicyRecoveryFactors',
  properties: [
    {
      '$ref': '#/definitions/PasswordPolicyRecoveryFactorSettings',
      propertyName: 'okta_call',
      commonType: 'object',
      isObject: true,
      model: 'PasswordPolicyRecoveryFactorSettings'
    },
    {
      '$ref': '#/definitions/PasswordPolicyRecoveryEmail',
      propertyName: 'okta_email',
      commonType: 'object',
      isObject: true,
      model: 'PasswordPolicyRecoveryEmail'
    },
    {
      '$ref': '#/definitions/PasswordPolicyRecoveryFactorSettings',
      propertyName: 'okta_sms',
      commonType: 'object',
      isObject: true,
      model: 'PasswordPolicyRecoveryFactorSettings'
    },
    {
      '$ref': '#/definitions/PasswordPolicyRecoveryQuestion',
      propertyName: 'recovery_question',
      commonType: 'object',
      isObject: true,
      model: 'PasswordPolicyRecoveryQuestion'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'PasswordPolicyRecoveryQuestion',
  properties: [
    {
      '$ref': '#/definitions/PasswordPolicyRecoveryQuestionProperties',
      readOnly: true,
      propertyName: 'properties',
      commonType: 'object',
      isObject: true,
      model: 'PasswordPolicyRecoveryQuestionProperties'
    },
    {
      enum: [Array],
      readOnly: true,
      propertyName: 'status',
      commonType: 'string'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'PasswordPolicyRecoveryQuestionComplexity',
  properties: [
    {
      readOnly: true,
      propertyName: 'minLength',
      commonType: 'integer'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'PasswordPolicyRecoveryQuestionProperties',
  properties: [
    {
      '$ref': '#/definitions/PasswordPolicyRecoveryQuestionComplexity',
      readOnly: true,
      propertyName: 'complexity',
      commonType: 'object',
      isObject: true,
      model: 'PasswordPolicyRecoveryQuestionComplexity'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'PasswordPolicyRecoverySettings',
  properties: [
    {
      '$ref': '#/definitions/PasswordPolicyRecoveryFactors',
      propertyName: 'factors',
      commonType: 'object',
      isObject: true,
      model: 'PasswordPolicyRecoveryFactors'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'PasswordPolicyRule',
  properties: [
    {
      '$ref': '#/definitions/PasswordPolicyRuleActions',
      readOnly: false,
      propertyName: 'actions',
      commonType: 'object',
      isObject: true,
      model: 'PasswordPolicyRuleActions'
    },
    {
      '$ref': '#/definitions/PasswordPolicyRuleConditions',
      readOnly: false,
      propertyName: 'conditions',
      commonType: 'object',
      isObject: true,
      model: 'PasswordPolicyRuleConditions'
    },
    { propertyName: 'name', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ],
  extends: 'PolicyRule'
}
{
  modelName: 'PasswordPolicyRuleAction',
  properties: [
    {
      enum: [Array],
      readOnly: false,
      propertyName: 'access',
      commonType: 'string'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'PasswordPolicyRuleActions',
  properties: [
    {
      '$ref': '#/definitions/PasswordPolicyRuleAction',
      propertyName: 'passwordChange',
      commonType: 'object',
      isObject: true,
      model: 'PasswordPolicyRuleAction'
    },
    {
      '$ref': '#/definitions/PasswordPolicyRuleAction',
      propertyName: 'selfServicePasswordReset',
      commonType: 'object',
      isObject: true,
      model: 'PasswordPolicyRuleAction'
    },
    {
      '$ref': '#/definitions/PasswordPolicyRuleAction',
      propertyName: 'selfServiceUnlock',
      commonType: 'object',
      isObject: true,
      model: 'PasswordPolicyRuleAction'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'PasswordPolicyRuleConditions',
  properties: [
    {
      '$ref': '#/definitions/PolicyNetworkCondition',
      propertyName: 'network',
      commonType: 'object',
      isObject: true,
      model: 'PolicyNetworkCondition'
    },
    {
      '$ref': '#/definitions/PolicyPeopleCondition',
      propertyName: 'people',
      commonType: 'object',
      isObject: true,
      model: 'PolicyPeopleCondition'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'PasswordPolicySettings',
  properties: [
    {
      '$ref': '#/definitions/PasswordPolicyDelegationSettings',
      propertyName: 'delegation',
      commonType: 'object',
      isObject: true,
      model: 'PasswordPolicyDelegationSettings'
    },
    {
      '$ref': '#/definitions/PasswordPolicyPasswordSettings',
      propertyName: 'password',
      commonType: 'object',
      isObject: true,
      model: 'PasswordPolicyPasswordSettings'
    },
    {
      '$ref': '#/definitions/PasswordPolicyRecoverySettings',
      propertyName: 'recovery',
      commonType: 'object',
      isObject: true,
      model: 'PasswordPolicyRecoverySettings'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'PlatformConditionEvaluatorPlatform',
  properties: [
    {
      '$ref': '#/definitions/PlatformConditionEvaluatorPlatformOperatingSystem',
      propertyName: 'os',
      commonType: 'object',
      isObject: true,
      model: 'PlatformConditionEvaluatorPlatformOperatingSystem'
    },
    { enum: [Array], propertyName: 'type', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'PlatformConditionEvaluatorPlatformOperatingSystem',
  properties: [
    { propertyName: 'expression', commonType: 'string' },
    { enum: [Array], propertyName: 'type', commonType: 'string' },
    {
      '$ref': '#/definitions/PlatformConditionEvaluatorPlatformOperatingSystemVersion',
      propertyName: 'version',
      commonType: 'object',
      isObject: true,
      model: 'PlatformConditionEvaluatorPlatformOperatingSystemVersion'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'PlatformConditionEvaluatorPlatformOperatingSystemVersion',
  properties: [
    { enum: [Array], propertyName: 'matchType', commonType: 'string' },
    { propertyName: 'value', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'PlatformPolicyRuleCondition',
  properties: [
    {
      propertyName: 'exclude',
      commonType: 'array',
      isArray: true,
      model: 'PlatformConditionEvaluatorPlatform'
    },
    {
      propertyName: 'include',
      commonType: 'array',
      isArray: true,
      model: 'PlatformConditionEvaluatorPlatform'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'Policy',
  properties: [
    {
      readOnly: true,
      propertyName: '_embedded',
      commonType: 'hash',
      isHash: true,
      model: 'object'
    },
    {
      readOnly: true,
      propertyName: '_links',
      commonType: 'hash',
      isHash: true,
      model: 'object'
    },
    {
      '$ref': '#/definitions/PolicyRuleConditions',
      propertyName: 'conditions',
      commonType: 'object',
      isObject: true,
      model: 'PolicyRuleConditions'
    },
    { readOnly: true, propertyName: 'created', commonType: 'dateTime' },
    { propertyName: 'description', commonType: 'string' },
    { readOnly: true, propertyName: 'id', commonType: 'string' },
    {
      readOnly: true,
      propertyName: 'lastUpdated',
      commonType: 'dateTime'
    },
    { propertyName: 'name', commonType: 'string' },
    { propertyName: 'priority', commonType: 'integer' },
    { enum: [Array], propertyName: 'status', commonType: 'string' },
    { propertyName: 'system', commonType: 'boolean' },
    {
      '$ref': '#/definitions/PolicyType',
      propertyName: 'type',
      commonType: 'enum',
      isEnum: true,
      model: 'PolicyType'
    }
  ],
  methods: [
    { alias: 'activate', arguments: [Array], operation: [Object] },
    { alias: 'deactivate', arguments: [Array], operation: [Object] },
    {
      alias: 'listPolicyRules',
      arguments: [Array],
      operation: [Object]
    },
    { alias: 'createRule', arguments: [Array], operation: [Object] },
    { alias: 'getPolicyRule', arguments: [Array], operation: [Object] }
  ],
  crud: [
    { alias: 'read', arguments: [Array], operation: [Object] },
    { alias: 'update', arguments: [Array], operation: [Object] },
    { alias: 'delete', arguments: [Array], operation: [Object] }
  ],
  tags: [ 'Policy' ],
  requiresResolution: true,
  resolutionStrategy: {
    propertyName: 'type',
    valueToModelMapping: {
      IDP_DISCOVERY: 'IdentityProviderPolicy',
      OAUTH_AUTHORIZATION_POLICY: 'OAuthAuthorizationPolicy',
      OKTA_SIGN_ON: 'OktaSignOnPolicy',
      PASSWORD: 'PasswordPolicy'
    }
  }
}
{
  modelName: 'PolicyAccountLink',
  properties: [
    { enum: [Array], propertyName: 'action', commonType: 'string' },
    {
      '$ref': '#/definitions/PolicyAccountLinkFilter',
      propertyName: 'filter',
      commonType: 'object',
      isObject: true,
      model: 'PolicyAccountLinkFilter'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'PolicyAccountLinkFilter',
  properties: [
    {
      '$ref': '#/definitions/PolicyAccountLinkFilterGroups',
      propertyName: 'groups',
      commonType: 'object',
      isObject: true,
      model: 'PolicyAccountLinkFilterGroups'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'PolicyAccountLinkFilterGroups',
  properties: [
    {
      propertyName: 'include',
      commonType: 'array',
      isArray: true,
      model: 'string'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'PolicyNetworkCondition',
  properties: [
    { enum: [Array], propertyName: 'connection', commonType: 'string' },
    {
      propertyName: 'exclude',
      commonType: 'array',
      isArray: true,
      model: 'string'
    },
    {
      propertyName: 'include',
      commonType: 'array',
      isArray: true,
      model: 'string'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'PolicyPeopleCondition',
  properties: [
    {
      '$ref': '#/definitions/GroupCondition',
      propertyName: 'groups',
      commonType: 'object',
      isObject: true,
      model: 'GroupCondition'
    },
    {
      '$ref': '#/definitions/UserCondition',
      propertyName: 'users',
      commonType: 'object',
      isObject: true,
      model: 'UserCondition'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'PolicyRule',
  properties: [
    { readOnly: true, propertyName: 'created', commonType: 'dateTime' },
    { readOnly: true, propertyName: 'id', commonType: 'string' },
    {
      readOnly: true,
      propertyName: 'lastUpdated',
      commonType: 'dateTime'
    },
    { propertyName: 'priority', commonType: 'integer' },
    {
      default: 'ACTIVE',
      enum: [Array],
      propertyName: 'status',
      commonType: 'string'
    },
    { default: false, propertyName: 'system', commonType: 'boolean' },
    { enum: [Array], propertyName: 'type', commonType: 'string' }
  ],
  methods: [
    { alias: 'activate', arguments: [Array], operation: [Object] },
    { alias: 'deactivate', arguments: [Array], operation: [Object] }
  ],
  crud: [
    { alias: 'update', arguments: [Array], operation: [Object] },
    { alias: 'delete', arguments: [Array], operation: [Object] }
  ],
  tags: [ 'Policy' ],
  requiresResolution: true,
  resolutionStrategy: {
    propertyName: 'type',
    valueToModelMapping: { PASSWORD: 'PasswordPolicyRule', SIGN_ON: 'OktaSignOnPolicyRule' }
  }
}
{
  modelName: 'PolicyRuleAuthContextCondition',
  properties: [ { enum: [Array], propertyName: 'authType', commonType: 'string' } ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'PolicyRuleConditions',
  properties: [
    {
      '$ref': '#/definitions/AppAndInstancePolicyRuleCondition',
      propertyName: 'app',
      commonType: 'object',
      isObject: true,
      model: 'AppAndInstancePolicyRuleCondition'
    },
    {
      '$ref': '#/definitions/AppInstancePolicyRuleCondition',
      propertyName: 'apps',
      commonType: 'object',
      isObject: true,
      model: 'AppInstancePolicyRuleCondition'
    },
    {
      '$ref': '#/definitions/PolicyRuleAuthContextCondition',
      propertyName: 'authContext',
      commonType: 'object',
      isObject: true,
      model: 'PolicyRuleAuthContextCondition'
    },
    {
      '$ref': '#/definitions/PasswordPolicyAuthenticationProviderCondition',
      propertyName: 'authProvider',
      commonType: 'object',
      isObject: true,
      model: 'PasswordPolicyAuthenticationProviderCondition'
    },
    {
      '$ref': '#/definitions/BeforeScheduledActionPolicyRuleCondition',
      propertyName: 'beforeScheduledAction',
      commonType: 'object',
      isObject: true,
      model: 'BeforeScheduledActionPolicyRuleCondition'
    },
    {
      '$ref': '#/definitions/ClientPolicyCondition',
      propertyName: 'clients',
      commonType: 'object',
      isObject: true,
      model: 'ClientPolicyCondition'
    },
    {
      '$ref': '#/definitions/ContextPolicyRuleCondition',
      propertyName: 'context',
      commonType: 'object',
      isObject: true,
      model: 'ContextPolicyRuleCondition'
    },
    {
      '$ref': '#/definitions/DevicePolicyRuleCondition',
      propertyName: 'device',
      commonType: 'object',
      isObject: true,
      model: 'DevicePolicyRuleCondition'
    },
    {
      '$ref': '#/definitions/GrantTypePolicyRuleCondition',
      propertyName: 'grantTypes',
      commonType: 'object',
      isObject: true,
      model: 'GrantTypePolicyRuleCondition'
    },
    {
      '$ref': '#/definitions/GroupPolicyRuleCondition',
      propertyName: 'groups',
      commonType: 'object',
      isObject: true,
      model: 'GroupPolicyRuleCondition'
    },
    {
      '$ref': '#/definitions/IdentityProviderPolicyRuleCondition',
      propertyName: 'identityProvider',
      commonType: 'object',
      isObject: true,
      model: 'IdentityProviderPolicyRuleCondition'
    },
    {
      '$ref': '#/definitions/MDMEnrollmentPolicyRuleCondition',
      propertyName: 'mdmEnrollment',
      commonType: 'object',
      isObject: true,
      model: 'MDMEnrollmentPolicyRuleCondition'
    },
    {
      '$ref': '#/definitions/PolicyNetworkCondition',
      propertyName: 'network',
      commonType: 'object',
      isObject: true,
      model: 'PolicyNetworkCondition'
    },
    {
      '$ref': '#/definitions/PolicyPeopleCondition',
      propertyName: 'people',
      commonType: 'object',
      isObject: true,
      model: 'PolicyPeopleCondition'
    },
    {
      '$ref': '#/definitions/PlatformPolicyRuleCondition',
      propertyName: 'platform',
      commonType: 'object',
      isObject: true,
      model: 'PlatformPolicyRuleCondition'
    },
    {
      '$ref': '#/definitions/RiskPolicyRuleCondition',
      propertyName: 'risk',
      commonType: 'object',
      isObject: true,
      model: 'RiskPolicyRuleCondition'
    },
    {
      '$ref': '#/definitions/RiskScorePolicyRuleCondition',
      propertyName: 'riskScore',
      commonType: 'object',
      isObject: true,
      model: 'RiskScorePolicyRuleCondition'
    },
    {
      '$ref': '#/definitions/OAuth2ScopesMediationPolicyRuleCondition',
      propertyName: 'scopes',
      commonType: 'object',
      isObject: true,
      model: 'OAuth2ScopesMediationPolicyRuleCondition'
    },
    {
      '$ref': '#/definitions/UserIdentifierPolicyRuleCondition',
      propertyName: 'userIdentifier',
      commonType: 'object',
      isObject: true,
      model: 'UserIdentifierPolicyRuleCondition'
    },
    {
      '$ref': '#/definitions/UserStatusPolicyRuleCondition',
      propertyName: 'userStatus',
      commonType: 'object',
      isObject: true,
      model: 'UserStatusPolicyRuleCondition'
    },
    {
      '$ref': '#/definitions/UserPolicyRuleCondition',
      propertyName: 'users',
      commonType: 'object',
      isObject: true,
      model: 'UserPolicyRuleCondition'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'PolicySubject',
  properties: [
    { propertyName: 'filter', commonType: 'string' },
    {
      propertyName: 'format',
      commonType: 'array',
      isArray: true,
      model: 'string'
    },
    { propertyName: 'matchAttribute', commonType: 'string' },
    {
      '$ref': '#/definitions/PolicySubjectMatchType',
      propertyName: 'matchType',
      commonType: 'enum',
      isEnum: true,
      model: 'PolicySubjectMatchType'
    },
    {
      '$ref': '#/definitions/PolicyUserNameTemplate',
      propertyName: 'userNameTemplate',
      commonType: 'object',
      isObject: true,
      model: 'PolicyUserNameTemplate'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'PolicySubjectMatchType',
  enum: [ 'USERNAME', 'EMAIL', 'USERNAME_OR_EMAIL', 'CUSTOM_ATTRIBUTE' ],
  tags: [ 'Policy' ]
}
{
  modelName: 'PolicyType',
  enum: [
    'OAUTH_AUTHORIZATION_POLICY',
    'OKTA_SIGN_ON',
    'PASSWORD',
    'IDP_DISCOVERY'
  ],
  tags: [ 'Policy' ]
}
{
  modelName: 'PolicyUserNameTemplate',
  properties: [ { propertyName: 'template', commonType: 'string' } ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'Protocol',
  properties: [
    {
      '$ref': '#/definitions/ProtocolAlgorithms',
      propertyName: 'algorithms',
      commonType: 'object',
      isObject: true,
      model: 'ProtocolAlgorithms'
    },
    {
      '$ref': '#/definitions/IdentityProviderCredentials',
      propertyName: 'credentials',
      commonType: 'object',
      isObject: true,
      model: 'IdentityProviderCredentials'
    },
    {
      '$ref': '#/definitions/ProtocolEndpoints',
      propertyName: 'endpoints',
      commonType: 'object',
      isObject: true,
      model: 'ProtocolEndpoints'
    },
    {
      '$ref': '#/definitions/ProtocolEndpoint',
      propertyName: 'issuer',
      commonType: 'object',
      isObject: true,
      model: 'ProtocolEndpoint'
    },
    {
      '$ref': '#/definitions/ProtocolRelayState',
      propertyName: 'relayState',
      commonType: 'object',
      isObject: true,
      model: 'ProtocolRelayState'
    },
    {
      propertyName: 'scopes',
      commonType: 'array',
      isArray: true,
      model: 'string'
    },
    {
      '$ref': '#/definitions/ProtocolSettings',
      propertyName: 'settings',
      commonType: 'object',
      isObject: true,
      model: 'ProtocolSettings'
    },
    { enum: [Array], propertyName: 'type', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'IdentityProvider' ]
}
{
  modelName: 'ProtocolAlgorithmType',
  properties: [
    {
      '$ref': '#/definitions/ProtocolAlgorithmTypeSignature',
      propertyName: 'signature',
      commonType: 'object',
      isObject: true,
      model: 'ProtocolAlgorithmTypeSignature'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'IdentityProvider' ]
}
{
  modelName: 'ProtocolAlgorithmTypeSignature',
  properties: [
    { propertyName: 'algorithm', commonType: 'string' },
    { enum: [Array], propertyName: 'scope', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'IdentityProvider' ]
}
{
  modelName: 'ProtocolAlgorithms',
  properties: [
    {
      '$ref': '#/definitions/ProtocolAlgorithmType',
      propertyName: 'request',
      commonType: 'object',
      isObject: true,
      model: 'ProtocolAlgorithmType'
    },
    {
      '$ref': '#/definitions/ProtocolAlgorithmType',
      propertyName: 'response',
      commonType: 'object',
      isObject: true,
      model: 'ProtocolAlgorithmType'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'IdentityProvider' ]
}
{
  modelName: 'ProtocolEndpoint',
  properties: [
    { enum: [Array], propertyName: 'binding', commonType: 'string' },
    { propertyName: 'destination', commonType: 'string' },
    { enum: [Array], propertyName: 'type', commonType: 'string' },
    { propertyName: 'url', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'IdentityProvider' ]
}
{
  modelName: 'ProtocolEndpoints',
  properties: [
    {
      '$ref': '#/definitions/ProtocolEndpoint',
      propertyName: 'acs',
      commonType: 'object',
      isObject: true,
      model: 'ProtocolEndpoint'
    },
    {
      '$ref': '#/definitions/ProtocolEndpoint',
      propertyName: 'authorization',
      commonType: 'object',
      isObject: true,
      model: 'ProtocolEndpoint'
    },
    {
      '$ref': '#/definitions/ProtocolEndpoint',
      propertyName: 'jwks',
      commonType: 'object',
      isObject: true,
      model: 'ProtocolEndpoint'
    },
    {
      '$ref': '#/definitions/ProtocolEndpoint',
      propertyName: 'metadata',
      commonType: 'object',
      isObject: true,
      model: 'ProtocolEndpoint'
    },
    {
      '$ref': '#/definitions/ProtocolEndpoint',
      propertyName: 'slo',
      commonType: 'object',
      isObject: true,
      model: 'ProtocolEndpoint'
    },
    {
      '$ref': '#/definitions/ProtocolEndpoint',
      propertyName: 'sso',
      commonType: 'object',
      isObject: true,
      model: 'ProtocolEndpoint'
    },
    {
      '$ref': '#/definitions/ProtocolEndpoint',
      propertyName: 'token',
      commonType: 'object',
      isObject: true,
      model: 'ProtocolEndpoint'
    },
    {
      '$ref': '#/definitions/ProtocolEndpoint',
      propertyName: 'userInfo',
      commonType: 'object',
      isObject: true,
      model: 'ProtocolEndpoint'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'IdentityProvider' ]
}
{
  modelName: 'ProtocolRelayState',
  properties: [
    {
      '$ref': '#/definitions/ProtocolRelayStateFormat',
      propertyName: 'format',
      commonType: 'enum',
      isEnum: true,
      model: 'ProtocolRelayStateFormat'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'IdentityProvider' ]
}
{
  modelName: 'ProtocolRelayStateFormat',
  enum: [ 'OPAQUE', 'FROM_URL' ],
  tags: [ 'IdentityProvider' ]
}
{
  modelName: 'ProtocolSettings',
  properties: [ { propertyName: 'nameFormat', commonType: 'string' } ],
  methods: [],
  crud: [],
  tags: [ 'IdentityProvider' ]
}
{
  modelName: 'Provisioning',
  properties: [
    { enum: [Array], propertyName: 'action', commonType: 'string' },
    {
      '$ref': '#/definitions/ProvisioningConditions',
      propertyName: 'conditions',
      commonType: 'object',
      isObject: true,
      model: 'ProvisioningConditions'
    },
    {
      '$ref': '#/definitions/ProvisioningGroups',
      propertyName: 'groups',
      commonType: 'object',
      isObject: true,
      model: 'ProvisioningGroups'
    },
    { propertyName: 'profileMaster', commonType: 'boolean' }
  ],
  methods: [],
  crud: [],
  tags: [ 'IdentityProvider' ]
}
{
  modelName: 'ProvisioningConditions',
  properties: [
    {
      '$ref': '#/definitions/ProvisioningDeprovisionedCondition',
      propertyName: 'deprovisioned',
      commonType: 'object',
      isObject: true,
      model: 'ProvisioningDeprovisionedCondition'
    },
    {
      '$ref': '#/definitions/ProvisioningSuspendedCondition',
      propertyName: 'suspended',
      commonType: 'object',
      isObject: true,
      model: 'ProvisioningSuspendedCondition'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'IdentityProvider' ]
}
{
  modelName: 'ProvisioningDeprovisionedCondition',
  properties: [ { enum: [Array], propertyName: 'action', commonType: 'string' } ],
  methods: [],
  crud: [],
  tags: [ 'IdentityProvider' ]
}
{
  modelName: 'ProvisioningGroups',
  properties: [
    { enum: [Array], propertyName: 'action', commonType: 'string' },
    {
      propertyName: 'assignments',
      commonType: 'array',
      isArray: true,
      model: 'string'
    },
    {
      propertyName: 'filter',
      commonType: 'array',
      isArray: true,
      model: 'string'
    },
    { propertyName: 'sourceAttributeName', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'IdentityProvider' ]
}
{
  modelName: 'ProvisioningSuspendedCondition',
  properties: [ { enum: [Array], propertyName: 'action', commonType: 'string' } ],
  methods: [],
  crud: [],
  tags: [ 'IdentityProvider' ]
}
{
  modelName: 'PushUserFactor',
  properties: [
    { propertyName: 'expiresAt', commonType: 'dateTime' },
    {
      '$ref': '#/definitions/FactorResultType',
      propertyName: 'factorResult',
      commonType: 'enum',
      isEnum: true,
      model: 'FactorResultType'
    },
    {
      '$ref': '#/definitions/PushUserFactorProfile',
      propertyName: 'profile',
      commonType: 'object',
      isObject: true,
      model: 'PushUserFactorProfile'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'UserFactor' ],
  extends: 'UserFactor'
}
{
  modelName: 'PushUserFactorProfile',
  properties: [
    { propertyName: 'credentialId', commonType: 'string' },
    { propertyName: 'deviceToken', commonType: 'string' },
    { propertyName: 'deviceType', commonType: 'string' },
    { propertyName: 'name', commonType: 'string' },
    { propertyName: 'platform', commonType: 'string' },
    { propertyName: 'version', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'UserFactor' ]
}
{
  modelName: 'RecoveryQuestionCredential',
  properties: [
    { propertyName: 'answer', commonType: 'string' },
    { propertyName: 'question', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'User' ]
}
{
  modelName: 'ResetPasswordToken',
  properties: [
    {
      readOnly: true,
      propertyName: 'resetPasswordUrl',
      commonType: 'string'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'User' ]
}
{
  modelName: 'ResponseLinks',
  properties: [],
  methods: [],
  crud: [],
  tags: [ 'User' ]
}
{
  modelName: 'RiskPolicyRuleCondition',
  properties: [
    {
      uniqueItems: true,
      propertyName: 'behaviors',
      commonType: 'array',
      isArray: true,
      model: 'string'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'RiskScorePolicyRuleCondition',
  properties: [ { propertyName: 'level', commonType: 'string' } ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'Role',
  properties: [
    {
      readOnly: true,
      propertyName: '_embedded',
      commonType: 'hash',
      isHash: true,
      model: 'object'
    },
    {
      readOnly: true,
      propertyName: '_links',
      commonType: 'hash',
      isHash: true,
      model: 'object'
    },
    {
      '$ref': '#/definitions/RoleAssignmentType',
      propertyName: 'assignmentType',
      commonType: 'enum',
      isEnum: true,
      model: 'RoleAssignmentType'
    },
    { readOnly: true, propertyName: 'created', commonType: 'dateTime' },
    { propertyName: 'description', commonType: 'string' },
    { readOnly: true, propertyName: 'id', commonType: 'string' },
    { readOnly: true, propertyName: 'label', commonType: 'string' },
    {
      readOnly: true,
      propertyName: 'lastUpdated',
      commonType: 'dateTime'
    },
    {
      '$ref': '#/definitions/RoleStatus',
      readOnly: true,
      propertyName: 'status',
      commonType: 'enum',
      isEnum: true,
      model: 'RoleStatus'
    },
    {
      '$ref': '#/definitions/RoleType',
      propertyName: 'type',
      commonType: 'enum',
      isEnum: true,
      model: 'RoleType'
    }
  ],
  methods: [
    {
      alias: 'addAdminGroupTarget',
      arguments: [Array],
      operation: [Object]
    },
    {
      alias: 'addAppInstanceTargetToAdminRole',
      arguments: [Array],
      operation: [Object]
    },
    {
      alias: 'addAppTargetToAdminRole',
      arguments: [Array],
      operation: [Object]
    },
    {
      alias: 'addAllAppsAsTargetToRole',
      arguments: [Array],
      operation: [Object]
    },
    {
      alias: 'addAppTargetToAppAdminRoleForUser',
      arguments: [Array],
      operation: [Object]
    },
    {
      alias: 'addAppTargetToAdminRoleForUser',
      arguments: [Array],
      operation: [Object]
    }
  ],
  crud: [],
  tags: [ 'User' ]
}
{
  modelName: 'RoleAssignmentType',
  enum: [ 'GROUP', 'USER' ],
  tags: [ 'Role' ]
}
{
  modelName: 'RoleStatus',
  enum: [ 'ACTIVE', 'INACTIVE' ],
  tags: [ 'User' ]
}
{
  modelName: 'RoleType',
  enum: [
    'SUPER_ADMIN',
    'ORG_ADMIN',
    'APP_ADMIN',
    'USER_ADMIN',
    'HELP_DESK_ADMIN',
    'READ_ONLY_ADMIN',
    'MOBILE_ADMIN',
    'API_ACCESS_MANAGEMENT_ADMIN',
    'REPORT_ADMIN'
  ],
  tags: [ 'Role' ]
}
{
  modelName: 'SamlApplication',
  properties: [
    {
      '$ref': '#/definitions/SamlApplicationSettings',
      propertyName: 'settings',
      commonType: 'object',
      isObject: true,
      model: 'SamlApplicationSettings'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ],
  extends: 'Application'
}
{
  modelName: 'SamlApplicationSettings',
  properties: [
    {
      '$ref': '#/definitions/SamlApplicationSettingsSignOn',
      propertyName: 'signOn',
      commonType: 'object',
      isObject: true,
      model: 'SamlApplicationSettingsSignOn'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ],
  extends: 'ApplicationSettings'
}
{
  modelName: 'SamlApplicationSettingsSignOn',
  properties: [
    { propertyName: 'assertionSigned', commonType: 'boolean' },
    {
      propertyName: 'attributeStatements',
      commonType: 'array',
      isArray: true,
      model: 'SamlAttributeStatement'
    },
    { propertyName: 'audience', commonType: 'string' },
    { propertyName: 'audienceOverride', commonType: 'string' },
    { propertyName: 'authnContextClassRef', commonType: 'string' },
    { propertyName: 'defaultRelayState', commonType: 'string' },
    { propertyName: 'destination', commonType: 'string' },
    { propertyName: 'destinationOverride', commonType: 'string' },
    { propertyName: 'digestAlgorithm', commonType: 'string' },
    { propertyName: 'honorForceAuthn', commonType: 'boolean' },
    { propertyName: 'idpIssuer', commonType: 'string' },
    { propertyName: 'recipient', commonType: 'string' },
    { propertyName: 'recipientOverride', commonType: 'string' },
    { propertyName: 'requestCompressed', commonType: 'boolean' },
    { propertyName: 'responseSigned', commonType: 'boolean' },
    { propertyName: 'signatureAlgorithm', commonType: 'string' },
    { propertyName: 'spIssuer', commonType: 'string' },
    { propertyName: 'ssoAcsUrl', commonType: 'string' },
    { propertyName: 'ssoAcsUrlOverride', commonType: 'string' },
    { propertyName: 'subjectNameIdFormat', commonType: 'string' },
    { propertyName: 'subjectNameIdTemplate', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ]
}
{
  modelName: 'SamlAttributeStatement',
  properties: [
    { propertyName: 'name', commonType: 'string' },
    { propertyName: 'namespace', commonType: 'string' },
    { propertyName: 'type', commonType: 'string' },
    {
      propertyName: 'values',
      commonType: 'array',
      isArray: true,
      model: 'string'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ]
}
{
  modelName: 'ScheduledUserLifecycleAction',
  properties: [ { enum: [Array], propertyName: 'status', commonType: 'string' } ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'SchemeApplicationCredentials',
  properties: [
    {
      '$ref': '#/definitions/PasswordCredential',
      propertyName: 'password',
      commonType: 'object',
      isObject: true,
      model: 'PasswordCredential'
    },
    { propertyName: 'revealPassword', commonType: 'boolean' },
    {
      '$ref': '#/definitions/ApplicationCredentialsScheme',
      propertyName: 'scheme',
      commonType: 'enum',
      isEnum: true,
      model: 'ApplicationCredentialsScheme'
    },
    {
      '$ref': '#/definitions/ApplicationCredentialsSigning',
      propertyName: 'signing',
      commonType: 'object',
      isObject: true,
      model: 'ApplicationCredentialsSigning'
    },
    { propertyName: 'userName', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ],
  extends: 'ApplicationCredentials'
}
{
  modelName: 'Scope',
  properties: [
    { propertyName: 'stringValue', commonType: 'string' },
    {
      '$ref': '#/definitions/ScopeType',
      propertyName: 'type',
      commonType: 'enum',
      isEnum: true,
      model: 'ScopeType'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Role' ]
}
{
  modelName: 'ScopeType',
  enum: [ 'CORS', 'REDIRECT' ],
  tags: [ 'Role' ]
}
{
  modelName: 'SecurePasswordStoreApplication',
  properties: [
    {
      '$ref': '#/definitions/SchemeApplicationCredentials',
      propertyName: 'credentials',
      commonType: 'object',
      isObject: true,
      model: 'SchemeApplicationCredentials'
    },
    {
      default: 'template_sps',
      propertyName: 'name',
      commonType: 'object',
      isObject: true,
      model: undefined
    },
    {
      '$ref': '#/definitions/SecurePasswordStoreApplicationSettings',
      propertyName: 'settings',
      commonType: 'object',
      isObject: true,
      model: 'SecurePasswordStoreApplicationSettings'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ],
  extends: 'Application'
}
{
  modelName: 'SecurePasswordStoreApplicationSettings',
  properties: [
    {
      '$ref': '#/definitions/SecurePasswordStoreApplicationSettingsApplication',
      propertyName: 'app',
      commonType: 'object',
      isObject: true,
      model: 'SecurePasswordStoreApplicationSettingsApplication'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ],
  extends: 'ApplicationSettings'
}
{
  modelName: 'SecurePasswordStoreApplicationSettingsApplication',
  properties: [
    { propertyName: 'optionalField1', commonType: 'string' },
    { propertyName: 'optionalField1Value', commonType: 'string' },
    { propertyName: 'optionalField2', commonType: 'string' },
    { propertyName: 'optionalField2Value', commonType: 'string' },
    { propertyName: 'optionalField3', commonType: 'string' },
    { propertyName: 'optionalField3Value', commonType: 'string' },
    { propertyName: 'passwordField', commonType: 'string' },
    { propertyName: 'url', commonType: 'string' },
    { propertyName: 'usernameField', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ],
  extends: 'ApplicationSettingsApplication'
}
{
  modelName: 'SecurityQuestion',
  properties: [
    { propertyName: 'answer', commonType: 'string' },
    { propertyName: 'question', commonType: 'string' },
    { propertyName: 'questionText', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'UserFactor' ]
}
{
  modelName: 'SecurityQuestionUserFactor',
  properties: [
    {
      '$ref': '#/definitions/SecurityQuestionUserFactorProfile',
      propertyName: 'profile',
      commonType: 'object',
      isObject: true,
      model: 'SecurityQuestionUserFactorProfile'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'UserFactor' ],
  extends: 'UserFactor'
}
{
  modelName: 'SecurityQuestionUserFactorProfile',
  properties: [
    { propertyName: 'answer', commonType: 'string' },
    { propertyName: 'question', commonType: 'string' },
    { propertyName: 'questionText', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'UserFactor' ]
}
{
  modelName: 'Session',
  properties: [
    {
      readOnly: true,
      propertyName: '_links',
      commonType: 'hash',
      isHash: true,
      model: 'object'
    },
    {
      readOnly: true,
      propertyName: 'amr',
      commonType: 'array',
      isArray: true,
      model: 'SessionAuthenticationMethod'
    },
    {
      readOnly: true,
      propertyName: 'createdAt',
      commonType: 'dateTime'
    },
    {
      readOnly: true,
      propertyName: 'expiresAt',
      commonType: 'dateTime'
    },
    { readOnly: true, propertyName: 'id', commonType: 'string' },
    {
      '$ref': '#/definitions/SessionIdentityProvider',
      readOnly: true,
      propertyName: 'idp',
      commonType: 'object',
      isObject: true,
      model: 'SessionIdentityProvider'
    },
    {
      readOnly: true,
      propertyName: 'lastFactorVerification',
      commonType: 'dateTime'
    },
    {
      readOnly: true,
      propertyName: 'lastPasswordVerification',
      commonType: 'dateTime'
    },
    { readOnly: true, propertyName: 'login', commonType: 'string' },
    {
      '$ref': '#/definitions/SessionStatus',
      readOnly: true,
      propertyName: 'status',
      commonType: 'enum',
      isEnum: true,
      model: 'SessionStatus'
    },
    { readOnly: true, propertyName: 'userId', commonType: 'string' }
  ],
  methods: [ { alias: 'refresh', arguments: [Array], operation: [Object] } ],
  crud: [
    { alias: 'read', arguments: [Array], operation: [Object] },
    { alias: 'delete', arguments: [Array], operation: [Object] }
  ],
  tags: [ 'Session' ]
}
{
  modelName: 'SessionAuthenticationMethod',
  enum: [
    'pwd', 'swk', 'hwk',
    'otp', 'sms', 'tel',
    'geo', 'fpt', 'kba',
    'mfa'
  ],
  tags: [ 'Session' ]
}
{
  modelName: 'SessionIdentityProvider',
  properties: [
    { readOnly: true, propertyName: 'id', commonType: 'string' },
    {
      '$ref': '#/definitions/SessionIdentityProviderType',
      readOnly: true,
      propertyName: 'type',
      commonType: 'enum',
      isEnum: true,
      model: 'SessionIdentityProviderType'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Session' ]
}
{
  modelName: 'SessionIdentityProviderType',
  enum: [ 'ACTIVE_DIRECTORY', 'LDAP', 'OKTA', 'FEDERATION', 'SOCIAL' ],
  tags: [ 'Session' ]
}
{
  modelName: 'SessionStatus',
  enum: [ 'ACTIVE', 'MFA_ENROLL', 'MFA_REQUIRED' ],
  tags: [ 'Session' ]
}
{
  modelName: 'SmsTemplate',
  properties: [
    { readOnly: true, propertyName: 'created', commonType: 'dateTime' },
    { readOnly: true, propertyName: 'id', commonType: 'string' },
    {
      readOnly: true,
      propertyName: 'lastUpdated',
      commonType: 'dateTime'
    },
    { propertyName: 'name', commonType: 'string' },
    { propertyName: 'template', commonType: 'string' },
    {
      '$ref': '#/definitions/SmsTemplateTranslations',
      propertyName: 'translations',
      commonType: 'object',
      isObject: true,
      model: 'SmsTemplateTranslations'
    },
    {
      '$ref': '#/definitions/SmsTemplateType',
      propertyName: 'type',
      commonType: 'enum',
      isEnum: true,
      model: 'SmsTemplateType'
    }
  ],
  methods: [
    { alias: 'partialUpdate', arguments: [Array], operation: [Object] }
  ],
  crud: [
    { alias: 'create', arguments: [Array], operation: [Object] },
    { alias: 'read', arguments: [], operation: [Object] },
    { alias: 'update', arguments: [Array], operation: [Object] },
    { alias: 'delete', arguments: [Array], operation: [Object] }
  ],
  tags: [ 'Template' ]
}
{
  modelName: 'SmsTemplateTranslations',
  properties: [],
  methods: [],
  crud: [],
  tags: [ 'Template' ]
}
{
  modelName: 'SmsTemplateType',
  enum: [ 'SMS_VERIFY_CODE' ],
  tags: [ 'Template' ]
}
{
  modelName: 'SmsUserFactor',
  properties: [
    {
      '$ref': '#/definitions/SmsUserFactorProfile',
      propertyName: 'profile',
      commonType: 'object',
      isObject: true,
      model: 'SmsUserFactorProfile'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'UserFactor' ],
  extends: 'UserFactor'
}
{
  modelName: 'SmsUserFactorProfile',
  properties: [ { propertyName: 'phoneNumber', commonType: 'string' } ],
  methods: [],
  crud: [],
  tags: [ 'UserFactor' ]
}
{
  modelName: 'SocialAuthToken',
  properties: [
    {
      readOnly: true,
      propertyName: 'expiresAt',
      commonType: 'dateTime'
    },
    { readOnly: true, propertyName: 'id', commonType: 'string' },
    {
      propertyName: 'scopes',
      commonType: 'array',
      isArray: true,
      model: 'string'
    },
    { propertyName: 'token', commonType: 'string' },
    { propertyName: 'tokenAuthScheme', commonType: 'string' },
    { enum: [Array], propertyName: 'tokenType', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'IdentityProvider' ]
}
{
  modelName: 'SwaApplication',
  properties: [
    {
      default: 'template_swa',
      propertyName: 'name',
      commonType: 'object',
      isObject: true,
      model: undefined
    },
    {
      '$ref': '#/definitions/SwaApplicationSettings',
      propertyName: 'settings',
      commonType: 'object',
      isObject: true,
      model: 'SwaApplicationSettings'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ],
  extends: 'BrowserPluginApplication'
}
{
  modelName: 'SwaApplicationSettings',
  properties: [
    {
      '$ref': '#/definitions/SwaApplicationSettingsApplication',
      propertyName: 'app',
      commonType: 'object',
      isObject: true,
      model: 'SwaApplicationSettingsApplication'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ],
  extends: 'ApplicationSettings'
}
{
  modelName: 'SwaApplicationSettingsApplication',
  properties: [
    { propertyName: 'buttonField', commonType: 'string' },
    { propertyName: 'loginUrlRegex', commonType: 'string' },
    { propertyName: 'passwordField', commonType: 'string' },
    { propertyName: 'url', commonType: 'string' },
    { propertyName: 'usernameField', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ],
  extends: 'ApplicationSettingsApplication'
}
{
  modelName: 'SwaThreeFieldApplication',
  properties: [
    {
      default: 'template_swa3field',
      propertyName: 'name',
      commonType: 'object',
      isObject: true,
      model: undefined
    },
    {
      '$ref': '#/definitions/SwaThreeFieldApplicationSettings',
      propertyName: 'settings',
      commonType: 'object',
      isObject: true,
      model: 'SwaThreeFieldApplicationSettings'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ],
  extends: 'BrowserPluginApplication'
}
{
  modelName: 'SwaThreeFieldApplicationSettings',
  properties: [
    {
      '$ref': '#/definitions/SwaThreeFieldApplicationSettingsApplication',
      propertyName: 'app',
      commonType: 'object',
      isObject: true,
      model: 'SwaThreeFieldApplicationSettingsApplication'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ],
  extends: 'ApplicationSettings'
}
{
  modelName: 'SwaThreeFieldApplicationSettingsApplication',
  properties: [
    { propertyName: 'buttonSelector', commonType: 'string' },
    { propertyName: 'extraFieldSelector', commonType: 'string' },
    { propertyName: 'extraFieldValue', commonType: 'string' },
    { propertyName: 'loginUrlRegex', commonType: 'string' },
    { propertyName: 'passwordSelector', commonType: 'string' },
    { propertyName: 'targetURL', commonType: 'string' },
    { propertyName: 'userNameSelector', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ],
  extends: 'ApplicationSettingsApplication'
}
{
  modelName: 'TempPassword',
  properties: [
    {
      readOnly: true,
      propertyName: 'tempPassword',
      commonType: 'string'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'User' ]
}
{
  modelName: 'TokenUserFactor',
  properties: [
    {
      '$ref': '#/definitions/TokenUserFactorProfile',
      propertyName: 'profile',
      commonType: 'object',
      isObject: true,
      model: 'TokenUserFactorProfile'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'UserFactor' ],
  extends: 'UserFactor'
}
{
  modelName: 'TokenUserFactorProfile',
  properties: [ { propertyName: 'credentialId', commonType: 'string' } ],
  methods: [],
  crud: [],
  tags: [ 'UserFactor' ]
}
{
  modelName: 'TotpUserFactor',
  properties: [
    {
      '$ref': '#/definitions/TotpUserFactorProfile',
      propertyName: 'profile',
      commonType: 'object',
      isObject: true,
      model: 'TotpUserFactorProfile'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'UserFactor' ],
  extends: 'UserFactor'
}
{
  modelName: 'TotpUserFactorProfile',
  properties: [ { propertyName: 'credentialId', commonType: 'string' } ],
  methods: [],
  crud: [],
  tags: [ 'UserFactor' ]
}
{
  modelName: 'TrustedOrigin',
  properties: [
    {
      readOnly: true,
      propertyName: '_links',
      commonType: 'hash',
      isHash: true,
      model: 'object'
    },
    { readOnly: true, propertyName: 'created', commonType: 'dateTime' },
    { propertyName: 'createdBy', commonType: 'string' },
    { readOnly: true, propertyName: 'id', commonType: 'string' },
    {
      readOnly: true,
      propertyName: 'lastUpdated',
      commonType: 'dateTime'
    },
    { propertyName: 'lastUpdatedBy', commonType: 'string' },
    { propertyName: 'name', commonType: 'string' },
    { propertyName: 'origin', commonType: 'string' },
    {
      propertyName: 'scopes',
      commonType: 'array',
      isArray: true,
      model: 'Scope'
    },
    { propertyName: 'status', commonType: 'string' }
  ],
  methods: [],
  crud: [
    { alias: 'create', arguments: [Array], operation: [Object] },
    { alias: 'read', arguments: [], operation: [Object] },
    { alias: 'update', arguments: [Array], operation: [Object] },
    { alias: 'delete', arguments: [Array], operation: [Object] }
  ],
  tags: [ 'TrustedOrigin' ]
}
{
  modelName: 'U2fUserFactor',
  properties: [
    {
      '$ref': '#/definitions/U2fUserFactorProfile',
      propertyName: 'profile',
      commonType: 'object',
      isObject: true,
      model: 'U2fUserFactorProfile'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'UserFactor' ],
  extends: 'UserFactor'
}
{
  modelName: 'U2fUserFactorProfile',
  properties: [ { propertyName: 'credentialId', commonType: 'string' } ],
  methods: [],
  crud: [],
  tags: [ 'UserFactor' ]
}
{
  modelName: 'User',
  properties: [
    {
      readOnly: true,
      propertyName: '_embedded',
      commonType: 'hash',
      isHash: true,
      model: 'object'
    },
    {
      readOnly: true,
      propertyName: '_links',
      commonType: 'hash',
      isHash: true,
      model: 'object'
    },
    {
      readOnly: true,
      propertyName: 'activated',
      commonType: 'dateTime'
    },
    { readOnly: true, propertyName: 'created', commonType: 'dateTime' },
    {
      '$ref': '#/definitions/UserCredentials',
      propertyName: 'credentials',
      commonType: 'object',
      isObject: true,
      model: 'UserCredentials'
    },
    { readOnly: true, propertyName: 'id', commonType: 'string' },
    {
      readOnly: true,
      propertyName: 'lastLogin',
      commonType: 'dateTime'
    },
    {
      readOnly: true,
      propertyName: 'lastUpdated',
      commonType: 'dateTime'
    },
    {
      readOnly: true,
      propertyName: 'passwordChanged',
      commonType: 'dateTime'
    },
    {
      '$ref': '#/definitions/UserProfile',
      propertyName: 'profile',
      commonType: 'object',
      isObject: true,
      model: 'UserProfile'
    },
    {
      '$ref': '#/definitions/UserStatus',
      readOnly: true,
      propertyName: 'status',
      commonType: 'enum',
      isEnum: true,
      model: 'UserStatus'
    },
    {
      readOnly: true,
      propertyName: 'statusChanged',
      commonType: 'dateTime'
    },
    {
      '$ref': '#/definitions/UserStatus',
      readOnly: true,
      propertyName: 'transitioningToStatus',
      commonType: 'enum',
      isEnum: true,
      model: 'UserStatus'
    },
    {
      '$ref': '#/definitions/UserType',
      propertyName: 'type',
      commonType: 'object',
      isObject: true,
      model: 'UserType'
    }
  ],
  methods: [
    { alias: 'listAppLinks', arguments: [Array], operation: [Object] },
    {
      alias: 'changePassword',
      arguments: [Array],
      operation: [Object]
    },
    {
      alias: 'changeRecoveryQuestion',
      arguments: [Array],
      operation: [Object]
    },
    {
      alias: 'forgotPasswordSetNewPassword',
      arguments: [Array],
      operation: [Object]
    },
    {
      alias: 'forgotPasswordGenerateOneTimeToken',
      arguments: [Array],
      operation: [Object]
    },
    { alias: 'assignRole', arguments: [Array], operation: [Object] },
    { alias: 'removeRole', arguments: [Array], operation: [Object] },
    {
      alias: 'listGroupTargets',
      arguments: [Array],
      operation: [Object]
    },
    {
      alias: 'removeGroupTarget',
      arguments: [Array],
      operation: [Object]
    },
    {
      alias: 'addGroupTarget',
      arguments: [Array],
      operation: [Object]
    },
    {
      alias: 'listAssignedRoles',
      arguments: [Array],
      operation: [Object]
    },
    {
      alias: 'addAllAppsAsTarget',
      arguments: [Array],
      operation: [Object]
    },
    { alias: 'listGroups', arguments: [Array], operation: [Object] },
    { alias: 'listGrants', arguments: [Array], operation: [Object] },
    { alias: 'revokeGrants', arguments: [Array], operation: [Object] },
    { alias: 'revokeGrant', arguments: [Array], operation: [Object] },
    {
      alias: 'revokeGrantsForUserAndClient',
      arguments: [Array],
      operation: [Object]
    },
    {
      alias: 'listRefreshTokensForUserAndClient',
      arguments: [Array],
      operation: [Object]
    },
    {
      alias: 'revokeTokenForUserAndClient',
      arguments: [Array],
      operation: [Object]
    },
    {
      alias: 'getRefreshTokenForUserAndClient',
      arguments: [Array],
      operation: [Object]
    },
    {
      alias: 'revokeTokensForUserAndClient',
      arguments: [Array],
      operation: [Object]
    },
    { alias: 'listClients', arguments: [Array], operation: [Object] },
    { alias: 'activate', arguments: [Array], operation: [Object] },
    { alias: 'reactivate', arguments: [Array], operation: [Object] },
    { alias: 'deactivate', arguments: [Array], operation: [Object] },
    { alias: 'suspend', arguments: [Array], operation: [Object] },
    { alias: 'unsuspend', arguments: [Array], operation: [Object] },
    { alias: 'resetPassword', arguments: [Array], operation: [Object] },
    {
      alias: 'expirePassword',
      arguments: [Array],
      operation: [Object]
    },
    {
      alias: 'expirePasswordAndGetTemporaryPassword',
      arguments: [Array],
      operation: [Object]
    },
    { alias: 'unlock', arguments: [Array], operation: [Object] },
    { alias: 'resetFactors', arguments: [Array], operation: [Object] },
    { alias: 'deleteFactor', arguments: [Array], operation: [Object] },
    { alias: 'addToGroup', arguments: [Array], operation: [Object] },
    { alias: 'enrollFactor', arguments: [Array], operation: [Object] },
    {
      alias: 'listSupportedFactors',
      arguments: [Array],
      operation: [Object]
    },
    { alias: 'listFactors', arguments: [Array], operation: [Object] },
    {
      alias: 'listSupportedSecurityQuestions',
      arguments: [Array],
      operation: [Object]
    },
    { alias: 'getFactor', arguments: [Array], operation: [Object] },
    {
      alias: 'setLinkedObject',
      arguments: [Array],
      operation: [Object]
    },
    {
      alias: 'listIdentityProviders',
      arguments: [Array],
      operation: [Object]
    },
    {
      alias: 'getLinkedObjects',
      arguments: [Array],
      operation: [Object]
    },
    { alias: 'clearSessions', arguments: [Array], operation: [Object] },
    {
      alias: 'removeLinkedObject',
      arguments: [Array],
      operation: [Object]
    }
  ],
  crud: [
    { alias: 'create', arguments: [Array], operation: [Object] },
    { alias: 'read', arguments: [], operation: [Object] },
    { alias: 'update', arguments: [Array], operation: [Object] },
    { alias: 'delete', arguments: [Array], operation: [Object] }
  ],
  tags: [ 'User' ]
}
{
  modelName: 'UserActivationToken',
  properties: [
    {
      readOnly: true,
      propertyName: 'activationToken',
      commonType: 'string'
    },
    {
      readOnly: true,
      propertyName: 'activationUrl',
      commonType: 'string'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'User' ]
}
{
  modelName: 'UserCondition',
  properties: [
    {
      propertyName: 'exclude',
      commonType: 'array',
      isArray: true,
      model: 'string'
    },
    {
      propertyName: 'include',
      commonType: 'array',
      isArray: true,
      model: 'string'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'UserCredentials',
  properties: [
    {
      '$ref': '#/definitions/PasswordCredential',
      propertyName: 'password',
      commonType: 'object',
      isObject: true,
      model: 'PasswordCredential'
    },
    {
      '$ref': '#/definitions/AuthenticationProvider',
      propertyName: 'provider',
      commonType: 'object',
      isObject: true,
      model: 'AuthenticationProvider'
    },
    {
      '$ref': '#/definitions/RecoveryQuestionCredential',
      propertyName: 'recovery_question',
      commonType: 'object',
      isObject: true,
      model: 'RecoveryQuestionCredential'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'User' ]
}
{
  modelName: 'UserFactor',
  properties: [
    {
      readOnly: true,
      propertyName: '_embedded',
      commonType: 'hash',
      isHash: true,
      model: 'object'
    },
    {
      readOnly: true,
      propertyName: '_links',
      commonType: 'hash',
      isHash: true,
      model: 'object'
    },
    { readOnly: true, propertyName: 'created', commonType: 'dateTime' },
    {
      '$ref': '#/definitions/FactorType',
      propertyName: 'factorType',
      commonType: 'enum',
      isEnum: true,
      model: 'FactorType'
    },
    { readOnly: true, propertyName: 'id', commonType: 'string' },
    {
      readOnly: true,
      propertyName: 'lastUpdated',
      commonType: 'dateTime'
    },
    {
      '$ref': '#/definitions/FactorProvider',
      propertyName: 'provider',
      commonType: 'enum',
      isEnum: true,
      model: 'FactorProvider'
    },
    {
      '$ref': '#/definitions/FactorStatus',
      readOnly: true,
      propertyName: 'status',
      commonType: 'enum',
      isEnum: true,
      model: 'FactorStatus'
    },
    {
      '$ref': '#/definitions/VerifyFactorRequest',
      propertyName: 'verify',
      commonType: 'object',
      isObject: true,
      model: 'VerifyFactorRequest'
    }
  ],
  methods: [
    { alias: 'activate', arguments: [Array], operation: [Object] },
    { alias: 'verify', arguments: [Array], operation: [Object] }
  ],
  crud: [ { alias: 'delete', arguments: [Array], operation: [Object] } ],
  tags: [ 'UserFactor' ],
  requiresResolution: true,
  resolutionStrategy: {
    propertyName: 'factorType',
    valueToModelMapping: {
      call: 'CallUserFactor',
      email: 'EmailUserFactor',
      push: 'PushUserFactor',
      question: 'SecurityQuestionUserFactor',
      sms: 'SmsUserFactor',
      token: 'TokenUserFactor',
      'token:hardware': 'HardwareUserFactor',
      'token:software:totp': 'TotpUserFactor',
      u2f: 'U2fUserFactor',
      web: 'WebUserFactor',
      webauthn: 'WebAuthnUserFactor'
    }
  }
}
{
  modelName: 'UserIdentifierConditionEvaluatorPattern',
  properties: [
    { enum: [Array], propertyName: 'matchType', commonType: 'string' },
    { propertyName: 'value', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'UserIdentifierPolicyRuleCondition',
  properties: [
    { propertyName: 'attribute', commonType: 'string' },
    {
      propertyName: 'patterns',
      commonType: 'array',
      isArray: true,
      model: 'UserIdentifierConditionEvaluatorPattern'
    },
    { enum: [Array], propertyName: 'type', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'UserIdentityProviderLinkRequest',
  properties: [ { propertyName: 'externalId', commonType: 'string' } ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'UserLifecycleAttributePolicyRuleCondition',
  properties: [
    { propertyName: 'attributeName', commonType: 'string' },
    { propertyName: 'matchingValue', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'UserNextLogin',
  enum: [ 'changePassword' ],
  tags: [ 'User' ]
}
{
  modelName: 'UserPolicyRuleCondition',
  properties: [
    {
      propertyName: 'exclude',
      commonType: 'array',
      isArray: true,
      model: 'string'
    },
    {
      '$ref': '#/definitions/InactivityPolicyRuleCondition',
      propertyName: 'inactivity',
      commonType: 'object',
      isObject: true,
      model: 'InactivityPolicyRuleCondition'
    },
    {
      propertyName: 'include',
      commonType: 'array',
      isArray: true,
      model: 'string'
    },
    {
      '$ref': '#/definitions/LifecycleExpirationPolicyRuleCondition',
      propertyName: 'lifecycleExpiration',
      commonType: 'object',
      isObject: true,
      model: 'LifecycleExpirationPolicyRuleCondition'
    },
    {
      '$ref': '#/definitions/PasswordExpirationPolicyRuleCondition',
      propertyName: 'passwordExpiration',
      commonType: 'object',
      isObject: true,
      model: 'PasswordExpirationPolicyRuleCondition'
    },
    {
      '$ref': '#/definitions/UserLifecycleAttributePolicyRuleCondition',
      propertyName: 'userLifecycleAttribute',
      commonType: 'object',
      isObject: true,
      model: 'UserLifecycleAttributePolicyRuleCondition'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'UserProfile',
  properties: [
    { propertyName: 'city', commonType: 'string' },
    { propertyName: 'costCenter', commonType: 'string' },
    { propertyName: 'countryCode', commonType: 'string' },
    { propertyName: 'department', commonType: 'string' },
    { propertyName: 'displayName', commonType: 'string' },
    { propertyName: 'division', commonType: 'string' },
    { propertyName: 'email', commonType: 'string' },
    { propertyName: 'employeeNumber', commonType: 'string' },
    { propertyName: 'firstName', commonType: 'string' },
    { propertyName: 'honorificPrefix', commonType: 'string' },
    { propertyName: 'honorificSuffix', commonType: 'string' },
    { propertyName: 'lastName', commonType: 'string' },
    { propertyName: 'locale', commonType: 'string' },
    { propertyName: 'login', commonType: 'string' },
    { propertyName: 'manager', commonType: 'string' },
    { propertyName: 'managerId', commonType: 'string' },
    { propertyName: 'middleName', commonType: 'string' },
    { propertyName: 'mobilePhone', commonType: 'string' },
    { propertyName: 'nickName', commonType: 'string' },
    { propertyName: 'organization', commonType: 'string' },
    { propertyName: 'postalAddress', commonType: 'string' },
    { propertyName: 'preferredLanguage', commonType: 'string' },
    { propertyName: 'primaryPhone', commonType: 'string' },
    { propertyName: 'profileUrl', commonType: 'string' },
    { propertyName: 'secondEmail', commonType: 'string' },
    { propertyName: 'state', commonType: 'string' },
    { propertyName: 'streetAddress', commonType: 'string' },
    { propertyName: 'timezone', commonType: 'string' },
    { propertyName: 'title', commonType: 'string' },
    { propertyName: 'userType', commonType: 'string' },
    { propertyName: 'zipCode', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'User' ]
}
{
  modelName: 'UserStatus',
  enum: [
    'ACTIVE',
    'DEPROVISIONED',
    'LOCKED_OUT',
    'PASSWORD_EXPIRED',
    'PROVISIONED',
    'RECOVERY',
    'STAGED',
    'SUSPENDED'
  ],
  tags: [ 'User' ]
}
{
  modelName: 'UserStatusPolicyRuleCondition',
  properties: [ { enum: [Array], propertyName: 'value', commonType: 'string' } ],
  methods: [],
  crud: [],
  tags: [ 'Policy' ]
}
{
  modelName: 'UserType',
  properties: [
    {
      readOnly: true,
      propertyName: '_links',
      commonType: 'hash',
      isHash: true,
      model: 'object'
    },
    { readOnly: true, propertyName: 'created', commonType: 'dateTime' },
    { readOnly: true, propertyName: 'createdBy', commonType: 'string' },
    { readOnly: true, propertyName: 'default', commonType: 'boolean' },
    { propertyName: 'description', commonType: 'string' },
    { propertyName: 'displayName', commonType: 'string' },
    { propertyName: 'id', commonType: 'string' },
    {
      readOnly: true,
      propertyName: 'lastUpdated',
      commonType: 'dateTime'
    },
    {
      readOnly: true,
      propertyName: 'lastUpdatedBy',
      commonType: 'string'
    },
    { propertyName: 'name', commonType: 'string' }
  ],
  methods: [],
  crud: [
    { alias: 'create', arguments: [Array], operation: [Object] },
    { alias: 'update', arguments: [Array], operation: [Object] },
    { alias: 'read', arguments: [Array], operation: [Object] },
    { alias: 'delete', arguments: [Array], operation: [Object] }
  ],
  tags: [ 'UserType' ]
}
{
  modelName: 'VerifyFactorRequest',
  properties: [
    { propertyName: 'activationToken', commonType: 'string' },
    { propertyName: 'answer', commonType: 'string' },
    { propertyName: 'attestation', commonType: 'string' },
    { propertyName: 'clientData', commonType: 'string' },
    { propertyName: 'nextPassCode', commonType: 'string' },
    { propertyName: 'passCode', commonType: 'string' },
    { propertyName: 'registrationData', commonType: 'string' },
    { propertyName: 'stateToken', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'UserFactor' ]
}
{
  modelName: 'VerifyUserFactorResponse',
  properties: [
    {
      readOnly: true,
      propertyName: '_embedded',
      commonType: 'hash',
      isHash: true,
      model: 'object'
    },
    {
      readOnly: true,
      propertyName: '_links',
      commonType: 'hash',
      isHash: true,
      model: 'object'
    },
    {
      readOnly: true,
      propertyName: 'expiresAt',
      commonType: 'dateTime'
    },
    {
      enum: [Array],
      propertyName: 'factorResult',
      commonType: 'string'
    },
    { propertyName: 'factorResultMessage', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'UserFactor' ]
}
{
  modelName: 'WebAuthnUserFactor',
  properties: [
    {
      '$ref': '#/definitions/WebAuthnUserFactorProfile',
      propertyName: 'profile',
      commonType: 'object',
      isObject: true,
      model: 'WebAuthnUserFactorProfile'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'UserFactor' ],
  extends: 'UserFactor'
}
{
  modelName: 'WebAuthnUserFactorProfile',
  properties: [
    { propertyName: 'authenticatorName', commonType: 'string' },
    { propertyName: 'credentialId', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'UserFactor' ]
}
{
  modelName: 'WebUserFactor',
  properties: [
    {
      '$ref': '#/definitions/WebUserFactorProfile',
      propertyName: 'profile',
      commonType: 'object',
      isObject: true,
      model: 'WebUserFactorProfile'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'UserFactor' ],
  extends: 'UserFactor'
}
{
  modelName: 'WebUserFactorProfile',
  properties: [ { propertyName: 'credentialId', commonType: 'string' } ],
  methods: [],
  crud: [],
  tags: [ 'UserFactor' ]
}
{
  modelName: 'WsFederationApplication',
  properties: [
    {
      default: 'template_wsfed',
      propertyName: 'name',
      commonType: 'object',
      isObject: true,
      model: undefined
    },
    {
      '$ref': '#/definitions/WsFederationApplicationSettings',
      propertyName: 'settings',
      commonType: 'object',
      isObject: true,
      model: 'WsFederationApplicationSettings'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ],
  extends: 'Application'
}
{
  modelName: 'WsFederationApplicationSettings',
  properties: [
    {
      '$ref': '#/definitions/WsFederationApplicationSettingsApplication',
      propertyName: 'app',
      commonType: 'object',
      isObject: true,
      model: 'WsFederationApplicationSettingsApplication'
    }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ],
  extends: 'ApplicationSettings'
}
{
  modelName: 'WsFederationApplicationSettingsApplication',
  properties: [
    { propertyName: 'attributeStatements', commonType: 'string' },
    { propertyName: 'audienceRestriction', commonType: 'string' },
    { propertyName: 'authnContextClassRef', commonType: 'string' },
    { propertyName: 'groupFilter', commonType: 'string' },
    { propertyName: 'groupName', commonType: 'string' },
    { propertyName: 'groupValueFormat', commonType: 'string' },
    { propertyName: 'nameIDFormat', commonType: 'string' },
    { propertyName: 'realm', commonType: 'string' },
    { propertyName: 'siteURL', commonType: 'string' },
    { propertyName: 'usernameAttribute', commonType: 'string' },
    { propertyName: 'wReplyOverride', commonType: 'boolean' },
    { propertyName: 'wReplyURL', commonType: 'string' }
  ],
  methods: [],
  crud: [],
  tags: [ 'Application' ],
  extends: 'ApplicationSettingsApplication'
}


